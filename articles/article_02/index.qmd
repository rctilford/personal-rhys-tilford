---
title: Sorting an HTML Table
author: Rhys Tilford
description: Read about how I used javascript to populate and sort an HTML table.
date: 11/5/2023
image: Table.png
categories: [HTML, JS, Programming]
---

<style>
  body {
background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' version='1.1' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:svgjs='http://svgjs.dev/svgjs' width='1440' height='6750' preserveAspectRatio='none' viewBox='0 0 1440 6750'%3e%3cg mask='url(%26quot%3b%23SvgjsMask2594%26quot%3b)' fill='none'%3e%3crect width='1440' height='6750' x='0' y='0' fill='url(%26quot%3b%23SvgjsLinearGradient2595%26quot%3b)'%3e%3c/rect%3e%3cpath d='M333.14 358.74L381.71 358.74L381.71 381.96L333.14 381.96z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M137.91 2894.92a126.48 126.48 0 1 0 56.51 246.56z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M689.38 794.31 a32.51 32.51 0 1 0 65.02 0 a32.51 32.51 0 1 0 -65.02 0z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M915.34 1603.86 a86.57 86.57 0 1 0 173.14 0 a86.57 86.57 0 1 0 -173.14 0z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M734.29 388.04 a0.24 0.24 0 1 0 0.48 0 a0.24 0.24 0 1 0 -0.48 0z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M201.63 4130.22L344.64 4130.22L344.64 4273.23L201.63 4273.23z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M496.79 1646.18 a138.22 138.22 0 1 0 276.44 0 a138.22 138.22 0 1 0 -276.44 0z' fill='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M368.15 3641.47L403.94 3641.47L403.94 3743.38L368.15 3743.38z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1162.78 3222.81 a143.45 143.45 0 1 0 286.9 0 a143.45 143.45 0 1 0 -286.9 0z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1163.35 4234.3L1264.06 4234.3L1264.06 4296.69L1163.35 4296.69z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M965.76 4057.05L1017.08 4057.05L1017.08 4084.65L965.76 4084.65z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1036.64 3593.74L1051.98 3593.74L1051.98 3637.1L1036.64 3637.1z' fill='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M771.68 3922.61L780.36 3922.61L780.36 3931.29L771.68 3931.29z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M308.21 951.13L348.05 951.13L348.05 990.97L308.21 990.97z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M837.68 1516.83a38.62 38.62 0 1 0 70.8 30.86z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M142.21 1682.98L259.29 1682.98L259.29 1760.72L142.21 1760.72z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M389.8 6630.51L440.08 6630.51L440.08 6640.98L389.8 6640.98z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M537.15 6288.52L643.12 6288.52L643.12 6431.85L537.15 6431.85z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M505.96 1635.57L596.99 1635.57L596.99 1770.59L505.96 1770.59z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M1296.2 5750.32L1398.68 5750.32L1398.68 5852.8L1296.2 5852.8z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M658.08 44.1L760.6 44.1L760.6 165.27L658.08 165.27z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M539.4 3310.32L634.56 3310.32L634.56 3405.48L539.4 3405.48z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M128.98 3880.81 a27.53 27.53 0 1 0 55.06 0 a27.53 27.53 0 1 0 -55.06 0z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1329.15 4685.97a104.45 104.45 0 1 0-77.78 193.88z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1433.27 731.83L1478.35 731.83L1478.35 798.21L1433.27 798.21z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M542.54 2003.08L609.37 2003.08L609.37 2069.91L542.54 2069.91z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M87.91 5394.28L135.76 5394.28L135.76 5442.13L87.91 5442.13z' fill='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M532.57 596.48 a25.19 25.19 0 1 0 50.38 0 a25.19 25.19 0 1 0 -50.38 0z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1238.65 326.17a118.16 118.16 0 1 0 106.96-210.73z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M679.28 1037.25 a53.69 53.69 0 1 0 107.38 0 a53.69 53.69 0 1 0 -107.38 0z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1129.18 1417.25 a96.3 96.3 0 1 0 192.6 0 a96.3 96.3 0 1 0 -192.6 0z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M856.06 3879.67L977.76 3879.67L977.76 3971.58L856.06 3971.58z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M110.36 4900.88 a66.38 66.38 0 1 0 132.76 0 a66.38 66.38 0 1 0 -132.76 0z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M863.47 86.7 a17.95 17.95 0 1 0 35.9 0 a17.95 17.95 0 1 0 -35.9 0z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1313.67 2931.75L1322.89 2931.75L1322.89 3019.88L1313.67 3019.88z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M782.96 455.12L914.65 455.12L914.65 586.81L782.96 586.81z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M465.83 3856.51 a27.21 27.21 0 1 0 54.42 0 a27.21 27.21 0 1 0 -54.42 0z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M929.44 687.7a45.52 45.52 0 1 0-91-2.68z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M866.15 270.51L888.61 270.51L888.61 292.97L866.15 292.97z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M315.82 6233.13L316.3 6233.13L316.3 6233.61L315.82 6233.61z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M423.56 337.64 a131.56 131.56 0 1 0 263.12 0 a131.56 131.56 0 1 0 -263.12 0z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M320.74 6216.25L367.71 6216.25L367.71 6223.32L320.74 6223.32z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1389.94 6268.57 a3.36 3.36 0 1 0 6.72 0 a3.36 3.36 0 1 0 -6.72 0z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1199.25 3103.05L1304.73 3103.05L1304.73 3208.53L1199.25 3208.53z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1191.4 6494.89L1332.42 6494.89L1332.42 6530.66L1191.4 6530.66z' fill='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M1003.09 633.8a22.52 22.52 0 1 0 30.17 33.44z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1240.3 711.3a101.08 101.08 0 1 0 190.44-67.84z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M370.25 1407.14L437.19 1407.14L437.19 1474.08L370.25 1474.08z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M578.94 4656.99L690.21 4656.99L690.21 4739.99L578.94 4739.99z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M750.26 2142.16L815.17 2142.16L815.17 2242.51L750.26 2242.51z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M750.46 629.86 a80.54 80.54 0 1 0 161.08 0 a80.54 80.54 0 1 0 -161.08 0z' fill='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M1119.51 5248.67L1171.28 5248.67L1171.28 5300.44L1119.51 5300.44z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M695.83 3734.01 a94.6 94.6 0 1 0 189.2 0 a94.6 94.6 0 1 0 -189.2 0z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M975.34 1608.21a138.03 138.03 0 1 0 199.95 190.34z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1275.3 4838.33L1388.84 4838.33L1388.84 4873.09L1275.3 4873.09z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M368.73 4590.85a132.51 132.51 0 1 0 209.03-162.92z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1206.74 5311.72a10.74 10.74 0 1 0 21.2-3.46z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M796.39 2703.4L908.35 2703.4L908.35 2815.36L796.39 2815.36z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M1016.59 2138.55a90.88 90.88 0 1 0 119.21-137.2z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3c/g%3e%3cdefs%3e%3cmask id='SvgjsMask2594'%3e%3crect width='1440' height='6750' fill='white'%3e%3c/rect%3e%3c/mask%3e%3clinearGradient x1='50%25' y1='0%25' x2='50%25' y2='100%25' gradientUnits='userSpaceOnUse' id='SvgjsLinearGradient2595'%3e%3cstop stop-color='rgba(14%2c 42%2c 71%2c 0)' offset='0.98'%3e%3c/stop%3e%3cstop stop-color='rgba(89%2c 49%2c 150%2c 1)' offset='1'%3e%3c/stop%3e%3c/linearGradient%3e%3c/defs%3e%3c/svg%3e");
}
</style>

### The Data Input

For this challenge, we recieved an array of objects that contained metadata about artists who perform a music genre known as bhangra. Each object contained the three attributes:

 - *name* referring to the name of each artist.
 - *birthYear* referring to the year each artist was born.
 - *link* referring to a youtube link for a video of that artist's work.

##### This is the array we were given.

```js
const artists = [
  {
    name: "Ms Scandalous",
    birthYear: 1985,
    link: "https://www.youtube.com/watch?v=2FPivlfvxu0"
  },
  {
    name: "Juggy D",
    birthYear: 1981,
    link: "https://www.youtube.com/watch?v=1jAc_-FVjdI"
  },
  {
    name: "Sukhbir Singh",
    birthYear: 1969,
    link: "https://www.youtube.com/watch?v=HiprNF9Jad0"
  },
  {
    name: "Abrar-ul-Haq",
    birthYear: 1989,
    link: "https://www.youtube.com/watch?v=-lnnVIP7FEc"
  },
  {
    name: "Rishi Rich",
    birthYear: 1970,
    link: "https://www.youtube.com/watch?v=O95-w2gACuA"
  }
]
```

### Step 1. Making the Table

First, the students must populate a given table element to hold the data. We chose to accomplish this by systematically accumulating HTML tags as string surrounding metadata from the array and inserting the accumulation into the table element.

```js
function populateTable(array) {

  let table = document.getElementById('bhangra'); // this code selects the table

  // declare a string to hold the inner HTML code for the table
  let contents = "<tbody>";

  // add the header row
  contents += `<tr><th>name</th>`;
  contents += `<th>birthyear</th>`;
  contents += `<th>link</th></tr>`;


  array.forEach(function (artist) {
    contents += `<tr>`; // open the row
    contents += `<td>${artist.name}</td>`;
    contents += `<td>${artist.birthYear}</td>`;
    contents += `<td><a href= "${artist.link}" target="_blank">${artist.link}</a></td>`;
    contents += `</tr>`; // close the row
  })


  // close out the body of the table
  contents += "</tbody>";

  table.innerHTML = contents; // this code populates the table with the contents string

};

// call the function to populate the table
populateTable(artists);
```

### Step 2. Initializing Button Elements

Second, we created a general function for creating button elements.

```js
function createButton(id, label, parent) {
 
  // create a new button element
  const newbutton = document.createElement("button");
 
  // add the text to the button
  newbutton.innerText = label;
 
  // add the id to the button
  newbutton.id = id;
 
  // append the button to the parent
  parent.appendChild(newbutton);

  // return the button
  return newbutton;

};
```
### Step 3. Initialize All Buttons

Third we used the `createButton()` function to make buttons for each of the sorting actions we want to enable.

```js
const nameButton = createButton("name-button", "Sort by Name", document.getElementById("sorting"));

const yearButton = createButton("year-button", "Sort by Year", document.getElementById("sorting"));

const randomButton = createButton("random-button", "Shuffle", document.getElementById("sorting"));
```

### Step 4. Create Event Listeners
Fourth, we needed to create event listeners for each button so the javascript code to sort the data would run when the buttons are pressed.

:::{.callout-note}
The functions referrenced in each event listener are referenced later in the document. This is not problematic because JavaScript uses asynchronous programming.
:::

```js
nameButton.addEventListener('click', function () {
  artists.sort(byName);
});

yearButton.addEventListener('click', function () {
  artists.sort(byYear);
});

randomButton.addEventListener('click', function () {
  artists.sort(shuffle);
});
```
### Step 5. Functions for Sorting

Fifth and finally, we needed to create a function for each sort method.

```js
// first a function to sort by name:
function byName(a, b) {

  populateTable(artists.sort(function (a, b) {
    if (a.name < b.name) return -1;
    if (a.name > b.name) return 1;
    return 0;
  }));

};

// second a function to sort by year:
function byYear(a, b) {

  populateTable(artists.sort(function (a, b) {
    if (a.birthYear < b.birthYear) return -1;
    if (a.birthYear > b.birthYear) return 1;
    return 0;
  }));

};

// third a function to shuffle the rows:
function shuffle() {

    for (let i = artists.length - 1; i > 0; i--) {
      let j = Math.floor(Math.random() * (i + 1));
      [artists[i], artists[j]] = [artists[j], artists[i]];
    }

    populateTable(artists);

};
```

*Some parts of the above code were adapted from suggestions by Github Copilot.*

### If you would like to see the code in action click [here](https://rctilford.github.io/CSC324/).