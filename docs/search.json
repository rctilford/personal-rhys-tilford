[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hi there! I’m happy you’re here!",
    "section": "",
    "text": "Hi there! I’m happy you’re here!\n\nThere are lots of resources in the Navbar.\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "This page includes several articles that document various projects I’ve made and presentations I’ve given.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nAnimating an SVG Path for a Logo\n\n\n\nCSS\n\n\nHTML\n\n\nQuarto\n\n\nMajor Enhancement\n\n\n\n\n\n\n\nRhys Tilford\n\n\nNov 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCSS Image Zoom on Hover\n\n\n\nCSS\n\n\nHTML\n\n\nProgramming\n\n\nQuarto\n\n\n\n\n\n\n\nRhys Tilford\n\n\nNov 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCantor Set Presentation\n\n\n\nEducation\n\n\nMath\n\n\n\nRead my presentation of everything I have learned about the Cantor Set.\n\n\n\nRhys Tilford\n\n\nNov 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 2 Solution\n\n\n\nJS\n\n\nJust For Fun\n\n\nProgramming\n\n\n\nRead about my solution to Day 2 of the 2022 Advent of Code Challenge.\n\n\n\nRhys Tilford\n\n\nNov 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle Analytics Integration\n\n\n\nData Analysis\n\n\nProgramming\n\n\nTutorial\n\n\n\nRead about how I set up Google Analytics for Quarto\n\n\n\nRhys Tilford\n\n\nNov 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSorting an HTML Table\n\n\n\nHTML\n\n\nJS\n\n\nProgramming\n\n\n\nRead about how I used javascript to populate and sort an HTML table.\n\n\n\nRhys Tilford\n\n\nNov 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidying Unkempt Data\n\n\n\nData Analysis\n\n\nProgramming\n\n\nR\n\n\n\nRead about how I used R to tidy and display urban transport data\n\n\n\nRhys Tilford\n\n\nNov 13, 2023\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_06/index.html",
    "href": "articles/article_06/index.html",
    "title": "CSS Image Zoom on Hover",
    "section": "",
    "text": "Introduction\nI wanted to make some slick effects for the website so it looks more professional. I found a tutorial on pinterest for a zoom effect on hover. However, I ran into several problems when I applied the code so I will show how I fixed those problems here.\n\n\nFinding the Element\nIn order to make any changes to the element we have to find it’s container. To do this we need to open the developer tools our browser while we are viewing the webpage we want to modify.\n\n\nCitation\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_04/index.html",
    "href": "articles/article_04/index.html",
    "title": "Tidying Unkempt Data",
    "section": "",
    "text": "Plot = import(\"https://esm.run/@observablehq/plot@0.6.11\")\n\n\n\n\n\n\n\nIntroduction\nTransport has always been a passion of mine. I have always adored Trains, Planes, Cars, Boats, and any other type of vehicle. As I matured I began to see transit through a new lens. The sights and sounds of large transport-oriented machinary no longer held my attention like they once did. A more humanistic view of transport caught my fancy and I began to take interest in transport equity for people from all socio-economic backgrounds.\nIt is well known that the automobile is a focal point in American society. That said, I was well into my teens before I noticed the consequences our car-centric culture causes for people who either can’t afford to own a car or choose not to own a car. This realization invigorated my interest in public transport and walkable infrastructure. In this data exploration, I hope to shed some light on the state of urban rail transport systems in America and compare them to that of other first world countries.\n\n\nThe Data\nI found a fascinating data table on this Wikipedia page so I decided to pull it and analize it. Here is the code I used to pull it:\n\nweb_page &lt;- \"https://en.wikipedia.org/wiki/List_of_metro_systems\"\n\nTables &lt;-\n  web_page %&gt;%\n  read_html() %&gt;%\n  html_elements(\"table\")\n\nMetroList &lt;- \n  Tables %&gt;% \n  purrr::pluck(1) %&gt;%\n  html_table() %&gt;%\n  select(1:9)\n\nMuch to my dismay the data was riddled with miscellaneous junk. Here is the data inside MetroList:\n\n\n\n\n\n\n\nHere are the problems I see in MetroList:\n\nThe name of the column that holds the number of stations on each system has a long and irrelevent name.\nSeveral of the columns have units and footnote links in them.\n\nI decided to import it to Rstudio and take a crack at cleaning it.\n\n\nTidying\nOptimistically, I decided to call this new table TidyMetroList.\n\nRenaming Columns\nThe following code renames the columns with a unified naming system:\n\nTidyMetroList &lt;-\n  MetroList %&gt;%\n  set_names(c(\"City\",\n              \"Country\",\n              \"Name\",\n              \"ServiceOpened\",\n              \"LastExpanded\",\n              \"StationCount\",\n              \"Lines\",\n              \"SystemLength\",\n              \"RidershipMillions\"))\n\n\n\n\n\n\n\n\nMuch better! There’s still more to go though. Next we can tackle the extra gunk in the columns.\n\n\nIsolating the Data\nWe’ll do this part with regular expressions and the stringr package. These are the main regular expressions we’ll use:\n\n\n[]: Grouping\n\nThis element matches one of any character inside the brackets.\n\n|: Alternation\n\nThis element sperates two expressions. The computer will match one or the other.\n\nw: Word\n\nThis matches “word characters.” It is very inclusive with what it defines as a word character so it needs to be used with care.\n\ns: Whitespace\n\nThis matches all forms of whitespace.\n\nd: Digit\n\nThis matches any natural number in the closed interval [0,9].\n\n.: Dot\n\nThis matches everything except linebreaks.\n\n+: Plus\n\nThis matches one or more of the expression it follows.\n\n?: Optional\n\nThis matches 0 or 1 of the expression it follows.\n\n{}: Quantifier\n\nThis matches the quantity in the curly-brackets.\n\n(?&lt;=ExpressionHere): Positive Lookbehind\n\nThis matches an expression before the main expression without including it in the result.\n\n(?=ExpressionHere): Positive Lookahead\n\nThis matches an expression after the main expression without including it in the result.\n\n\n– Adapted from the reference book on regexr.com\n\n\n\n\n\n\n\nTip\n\n\n\nIf you want some practice with regular expressions, checkout regexr.com. They have a development environment that tests expressions in real-time and a reference book containing descriptions for every command.\n\n\nThis code uses regular expresssions to remove all of the gunk in the columns:\n\nTidyMetroList &lt;-\n  TidyMetroList %&gt;%\n  mutate(ServiceOpened = as.numeric(str_replace_all(ServiceOpened, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\")),\n         LastExpanded = as.numeric(str_replace_all(LastExpanded, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\")),\n         Country = str_replace_all(Country, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\"),\n         Name = str_replace_all(Name, \"\\\\[[\\\\w\\\\s]+\\\\]|\\\\([\\\\w\\\\s]+\\\\)\", \"\"),\n         StationCount = as.numeric(str_replace_all(StationCount, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\")),\n         SystemLength = str_replace_all(SystemLength, \"\\\\skm\\\\s|\\\\d+(\\\\.\\\\d+)?.mi|\\\\[[\\\\w+\\\\s+]+\\\\]|[\\\\(\\\\)]+\", \"\"))\n\n\n\n\n\n\n\n\nLovely! Now there’s only one problem. Notice that the RidershipMillions column still was not dealt with in the last command. That’s because the parenthetical statements in that column show the timeframe in which the ridership data was collected. We’d rather not get rid of this data so hastily.\n\n\nA Special Case\nThe following code will snatch the data from the parenthesis and drop it in a new column called RidershipMillionsDataFrom. Then it will remove the excess information from RidershipMillions like we did above.\n\nTidyMetroList &lt;-\n  TidyMetroList %&gt;%\n  mutate(RidershipMillionsDataFrom = str_extract(RidershipMillions, \"(?&lt;=\\\\().+(?=\\\\))\"),\n         RidershipMillions = as.numeric(str_replace_all(RidershipMillions, \"\\\\[[\\\\w+\\\\s+]+\\\\]|(\\\\().+(\\\\))\", \"\")))\n\n\n\n\n\n\n\n\n\n\n\nRidership Data Analysis\n\nAnalysis\nI would like to know what the average ridership is like for the five largest economies. So I start by removing any NA values with the command in the third line. Next, I group the dataset so the mutate command takes the mean of RidershipMillions for each country. Now I filter out the five countries of interest. The select command picks out the columns I choose and the distinct command removes superfluous rows.\n\n\nCaveat\nThis data set is not a great indicator of how widely used urban rail transport is in these countries because we have no data in this dataset for the population that each metro system serves. If we did it would be very interesting to compare the average ridership divided by the average service zone population.\n\nMetroRidershipGraphInput &lt;-\n  TidyMetroList %&gt;% \n  filter(Country %in% c(\"United States\", \"Germany\", \"India\", \"China\", \"Japan\")) %&gt;%\n  na.omit() %&gt;% \n  group_by(Country) %&gt;% \n  mutate(RidershipMillionsAvg = mean(RidershipMillions)) %&gt;% \n  select(Country, RidershipMillionsAvg) %&gt;%  \n  distinct()\n\n\n\n\n\n\n\n\n\n\nVisual\n\n\n\n\n\n\nNote\n\n\n\nFor the visuals I used Observables. It is an excellent graphics generator that supplies a clear interface for creating a notebooks. If you would like to see the work I did to generate this code checkout my public notebook for this project.\n\n\n\nPlot.plot({\n  color: {    \n    type: \"categorical\",\n    domain: d3.range(5).map[`China`, `Germany`, `India`, `Japan`, `United States`], \n    range: [\"#593196\", \"#009CDC\", \"#13B955\", \"#EFA31D\", \"#FC3939\"]\n  },\n  title: \"Average Ridership in 5 Major Countries\",\n  y: { label: \"Millions of Riders\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroRidership.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average Ridership (Millions)\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\n\n\nSystem Size Data Analysis\n\nAnalysis\nFirst, we take the dataset and filter so we only have data on the five countries we are interested in. Then we remove any NA values. Now we move to mutations. We would like to see some metric of how many stations there are on each line. We will mutate StationCount divided by SystemLength and call this ratio StationDensity. At this point we still have the data for each metro system in the dataset individually. We will now use group_by() to group the data into 5 groups corresponding to the 5 countries. Now we can run a mutate to find the averages of StationCount, Lines, SystemLength, and StationDensity for each of the 5 countries. We will select the five columns of interest and remove any duplicated rows. Now we have all the data we need to make some really intriguing graphics.\n\n\nCaveat\nUpon looking at the data again, I realize that I could have built a variable more intuitive than StationDensity. Station density is currently measured in \\(\\frac{Stations}{Kilometer}\\). I think it would be easier to communicate this data if I flipped the ratio to measure in \\(\\frac{Kilometers}{Station}\\). In this format, the data would show that average distance between 2 stations. If one were to divide this average in half we could see the average max distance a rider would have to walk in order to get to their destination from a rail station.\n\nMetroSizeGraphInput &lt;- \n  TidyMetroList %&gt;% \n  filter(Country %in% c(\"United States\", \"Germany\", \"India\", \"China\", \"Japan\")) %&gt;%\n  na.omit() %&gt;%\n  mutate(StationDensity = StationCount/SystemLength) %&gt;% \n  group_by(Country) %&gt;% \n  mutate(StationCountAvg = mean(StationCount),\n         LinesAvg = mean(Lines),\n         SystemLengthAvg = mean(SystemLength),\n         StationDensityAvg = mean(StationDensity)) %&gt;% \n  select(Country, StationCountAvg, LinesAvg, SystemLengthAvg, StationDensityAvg) %&gt;% \n  distinct()\n\n\n\n\n\n\n\n\n\n\nVisuals\n\nPlot.plot({\n  color: {    \n    type: \"categorical\",\n    domain: d3.range(5).map[`China`, `Germany`, `India`, `Japan`, `United States`], \n    range: [\"#593196\", \"#009CDC\", \"#13B955\", \"#EFA31D\", \"#FC3939\"]\n  },\n  title: \"Average Distance Between Stations\",\n  y: { label: \"Kilometers per Station\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroSize.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average Station Density\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  color: {    \n    type: \"categorical\",\n    domain: d3.range(5).map[`China`, `Germany`, `India`, `Japan`, `United States`], \n    range: [\"#593196\", \"#009CDC\", \"#13B955\", \"#EFA31D\", \"#FC3939\"]\n  },\n  title: \"Average System Length\",\n  y: { label: \"Kilometers of Rail Service\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroSize.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average System Length\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  color: {    \n    type: \"categorical\",\n    domain: d3.range(5).map[`China`, `Germany`, `India`, `Japan`, `United States`], \n    range: [\"#593196\", \"#009CDC\", \"#13B955\", \"#EFA31D\", \"#FC3939\"]\n  },\n  title: \"Average Number of Stations per System\",\n  y: { label: \"Stations\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroSize.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average Number of Stations\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\n\n\nSystem Maturity Data Analysis\n\nAnalysis\nI would like to compare the age of these five metro systems. First I’ll filter out all the countries that are irelevant to our comparison. Next we need to find both the age of each system and the amount of time since each was expanded. For that we need to know the current date. Luckily, R has a function called Sys.Date() that returns the current time and date. So we need to extract the year from Sys.date(). We’ll use both our venerable regular expressions and the stringr package to accomplish this. Then we can ensure that this string of 4 numbers is converted to a number with the as.numeric() function. Now we mutate the difference between the column ServiceOpened and our current year to get a new column called SystemAge. We also mutate the difference between the column LastExpanded and our current year to get a new column called YearsSinceExpansion. Now we select only the columns we need and remove any NA vlaues from those columns. Next we can group by each country and find the average for each as explained above. Finally we select the columns Country, AverageYearsSinceExpansion, and AverageSystemAge. If graphing this data sounds like a problem, you would be right. We need to create a categorical variable with the levels: AverageYearsSinceExpansion and AverageSystemAge. Thank goodness for the R function pivot_longer()! It takes three arguments: - cols - A column or columns to consider in the pivoting process. - names_to - The name of a new column to hold the values of the column titles. (AverageYearsSinceExpansion and AverageSystemAge in our case). - values_to - The name of a new column to hold the values of the columns being pivoted. The resulting dataframe is just below the code chunk.\n\nMetroMaturityGraphInput &lt;- \n  TidyMetroList %&gt;% \n  filter(Country %in% c(\"United States\", \"Germany\", \"India\", \"China\", \"Japan\")) %&gt;% \n  mutate(SystemAge = (as.numeric(str_extract(Sys.Date(), \"\\\\d{4}\")) - ServiceOpened),\n         YearsSinceExpansion = (as.numeric(str_extract(Sys.Date(), \"\\\\d{4}\")) - LastExpanded)) %&gt;% \n  select(Country, SystemAge, YearsSinceExpansion) %&gt;%\n  na.omit() %&gt;%\n  group_by(Country) %&gt;% \n  mutate(AverageSystemAge = mean(SystemAge),\n         AverageYearsSinceExpansion = mean(YearsSinceExpansion)) %&gt;% \n  select(Country, AverageYearsSinceExpansion, AverageSystemAge) %&gt;%  \n  distinct() %&gt;%\n  pivot_longer(cols = !Country, names_to = \"Types\", values_to = \"Values\")\n\n\n\n\n\n\n\n\n\n\nVisual\n\nPlot.plot({\n  color: {    \n    type: \"categorical\",\n    domain: d3.range(5).map[`China`, `Germany`, `India`, `Japan`, `United States`], \n    range: [\"#593196\", \"#009CDC\", \"#13B955\", \"#EFA31D\", \"#FC3939\"]\n  },\n  title: \"Transit System Maturity\",\n  subtitle: \"Urban Rail System Maturity in 5 Major Countries\",\n  y: { label: \"Years\" },\n  marks: [\n    Plot.frame({ strokeOpacity: 0.1 }),\n    Plot.barY(await FileAttachment(\"MetroMaturity.csv\").csv({ typed: \"auto\" }), {\n      fx: \" \",\n      x: \"Country\",\n      y: \"Values\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_03/index.html",
    "href": "articles/article_03/index.html",
    "title": "Cantor Set Presentation",
    "section": "",
    "text": "The Definition\n\n11.1.10 Definition The Cantor set \\(\\mathbb{F}\\) is the intersection of the sets \\(F_n,n\\in\\mathbb{N}\\), obtained by successive removal of open middle thirds, starting with \\([0,1]\\).\n– Intro to Real Analysis: Bartle and Sherbert (p. 331)\n\n\n\nVisualization\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis visual is generated from the Wolfram Cloud: Use this link to access it.\n\n\n\n\nProving Key Properties\n\nProperty 1: The total length of the removed intervals is 1\n\nProof:\n\nGoal:\n\nFind the total length of the removed intervals.\n\nResources:\n\nFormula for the Geometric Series: \\(\\sum_{i=0}^{\\infty}ar^i=\\frac{a}{1-r}\\)\n\nStrategy:\n\nWe will construct a convergent geometric series of the lengths of the removed open middle thirds.\n\nMethod:\n\nFirst: We see from the visual that the length of the removed open middle thirds is the series: \\(\\frac{1}{3}+\\frac{2}{9}+\\frac{4}{27}+\\frac{8}{81}+...\\)\nSecond: Let’s work with the denominator: \\(=\\frac{1}{3^1}+\\frac{2}{3^2}+\\frac{4}{3^3}+\\frac{8}{3^4}+...\\)\nThird: Now we can tackle the numerator: \\(=\\frac{2^0}{3^1}+\\frac{2^1}{3^2}+\\frac{2^2}{3^3}+\\frac{2^3}{3^4}+...\\)\nFourth: Now we have what we need to build a series: \\(=\\sum_{i=0}^{\\infty}{\\frac{2^i}{3^{(i+1)}}}\\)\nFifth: We note that this isn’t quite a geometric series though. We’ll do some quick simplification to remedy this. We start by rewriting the denominator with exponent rules: \\(=\\sum_{i=0}^{\\infty}{\\frac{2^i}{3*3^i}}\\)\nSixth: Now we can pull the constant multiple outside the sum: \\(=\\frac{1}{3}*\\sum_{i=0}^{\\infty}{\\Bigl(\\frac{2}{3}\\Bigr)^i}\\)\nSeventh: Next we will apply the formula for the sum of a geometric series: \\(=\\frac{1}{3}*\\frac{1}{1-\\frac{2}{3}}\\)\nEighth: With some simplification we find that the sum is infact \\(1\\): \\(=\\frac{1}{3}*\\frac{1}{\\frac{1}{3}}=\\frac{3}{3}=1\\)\n\n\n\\(\\mathbfcal{Here}\\) \\(\\mathbfcal{Endeth}\\) \\(\\mathbfcal{The}\\) \\(\\mathbfcal{Proofeth}\\)\n\n\n\nProperty 2: The Cantor set \\(\\mathbb{F}\\) contains no nonempty open interval as a subset\n\nProof:\n\nGoal\n\nShow that there exists no nonempty open interval in \\(\\mathbb{F}\\)\n\nStrategy\n\nWe will assume that there is a nonempty open interval in \\(\\mathbb{F}\\) and then do math stuff until we find a contradiction.\n\nMethod\n\nFirst: We assume there is some nonempty open interval \\(C:=(a,b)\\) in \\(\\mathbb{F}\\).\nSecond We recall that \\(\\mathbb{F}\\) is the intersection of \\(\\mathbb{F}_n\\) for all \\(n\\in\\mathbb{N}\\).\n\nSo \\(C\\) must be a subset of \\(\\mathbb{F}_n\\) for all \\(n\\in\\mathbb{N}\\).\n\nThird: We want to make a statement the length of \\(C\\) So we assemble the following facts:\n\nWe know \\(0&lt;b-a\\) from the fact that \\(C\\) is nonempty.\nwe know \\(b-a\\leq\\Bigl(\\frac{2}{3}\\Bigr)^n\\) from the fact that the length of \\(C\\) can never be greater than the length of the remaining closed intervals in each \\(\\mathbb{F}_n\\) for all \\(n\\in\\mathbb{N}\\).\n\nFourth: We pull all the facts from Step \\(3\\) together to get: \\(0&lt;b-a\\leq\\Bigl(\\frac{2}{3}\\Bigr)^n\\).\nFifth: We recall that \\(\\lim_{n\\rightarrow\\infty}\\Bigl(\\frac{2}{3}\\Bigr)^n=0\\).\nSixth: Step \\(5\\) shows why the inequality from Step \\(4\\) is going to be an issue.\n\nIf we take the limit of the whole inequality we get \\(0&lt;b-a\\leq0\\) which is a contradiction \\(\\bigstar\\).\n\nSeventh: Since we have found our contradiction, we can eliminate one assumption we used to get here and conclude its negation. We will conclude that there is no nonempty open interval in \\(\\mathbb{F}\\).\n\n\n\\(\\mathbfcal{Periodt}\\) \\(\\mathbfcal{*snaps}\\) \\(\\mathbfcal{fingers}\\) \\(\\mathbfcal{with}\\) \\(\\mathbfcal{moxie*}\\)\n\n\n\nProperty 3: The Cantor set \\(\\mathbb{F}\\) has infinitely (even uncountably) many points\n\nA little bit about bases:\nWe know the Cantor set has all of the points of the form \\(\\frac{2^k}{3^n}\\) where k iterates over all the natural numbers less than or equal to n, for every \\(n\\in\\mathbb{N}\\). For example:\n\nWhen \\(n=1\\) we have \\(4\\) key points:\n\n\\(0\\), \\(\\frac{1}{3}\\), \\(\\frac{2}{3}\\), and \\(1\\)\n\nWhen \\(n=2\\) we have \\(8\\) key points:\n\n\\(0\\), \\(\\frac{1}{9}\\), \\(\\frac{2}{9}\\), \\(\\frac{1}{3}\\), \\(\\frac{2}{3}\\), \\(\\frac{7}{9}\\), \\(\\frac{8}{9}\\), and \\(1\\)\n\nWhen \\(n=3\\) we have \\(16\\) key points:\n\n\\(0\\), \\(\\frac{1}{27}\\), \\(\\frac{2}{27}\\), \\(\\frac{1}{9}\\), \\(\\frac{2}{9}\\), \\(\\frac{7}{27}\\), \\(\\frac{8}{27}\\), \\(\\frac{1}{3}\\), \\(\\frac{2}{3}\\), \\(\\frac{19}{27}\\), \\(\\frac{20}{27}\\), \\(\\frac{7}{9}\\), \\(\\frac{8}{9}\\), \\(\\frac{25}{27}\\), \\(\\frac{26}{27}\\), and \\(1\\)\n\n\nOne thing to note about all of these points is that we can convert them into a base three system for more clarity.\nOur base ten system operates as follows (we will use \\(\\frac{8}{27}\\) for this example):\n\\[\n\\frac{8}{27}=0. \\overline{296} =2\\frac{1}{10}+9\\frac{1}{100}+6\\frac{1}{1000}+2\\frac{1}{10000}+9\\frac{1}{100000}+6\\frac{1}{1000000}+...\n\\]\nNote that the denominators are all powers of ten.\nFor this example the decimal number goes off into infinity. Most of the other points of the Cantor set do as well.\nAlternatively, here is \\(\\frac{8}{27}\\) in a base three system:\n\\[\n\\frac{8}{27}=0\\frac{1}{3^0}+0\\frac{1}{3^1}+2\\frac{1}{3^2}+2\\frac{1}{3^3}=(0.022)_3\n\\]\nTo find this we first try to check how many \\(27s\\) are in \\(8\\). Upon finding none, we write the first term \\(0\\frac{1}{3^0}\\). Now we multiply \\(8\\) and \\(3\\) to get \\(24\\). Again, we check how many \\(27s\\) are in \\(24\\). Upon finding none, we write the second term \\(0\\frac{1}{3^1}\\). Now we multiply \\(24\\) and \\(3\\) to get \\(72\\). Now we actually find \\(2\\) \\(27s\\) in \\(72\\). so we write the third term \\(2\\frac{1}{3^2}\\). Now, since we found some \\(27s\\), we subtract \\(2*27\\) from \\(72\\) to get \\(18\\) and multiply \\(18\\) by \\(3\\) to get \\(54\\). Now we find exactly two \\(27s\\) in \\(54\\) so we finish by writing the fourth term \\(2\\frac{1}{3^3}\\).\nIn fact, we can apply the method above to write any \\(x\\in[0,1]\\) in base 3 form using only the numbers \\(0\\), \\(1\\), and \\(2\\).\n\n\n\n\n\n\nNote\n\n\n\n\\(\\frac{8}{27}\\) is written with \\(0s\\) and \\(2s\\). This is significant because it is one of the endpoints of the intervals in the Cantor set. We can gather from this that all points in any element of the Cantor set will be written with \\(0s\\) and \\(2s\\) because the \\(1s\\) correspond to the open middle thirds.\n\n\nNow we will write this more formally:\n\\[\nx=\\sum^{\\infty}_{n=1}{\\frac{a_n}{3^n}}=(0.a_1a_2...a_n...)_3\n\\]\nwhere each \\(a_n\\) is either \\(0\\), \\(1\\), or \\(2\\).\nNow that we know it can be written as a decimal, we will go on to the proof.\n\n\n\nProof\n\nGoal:\n\nShow that the Cantor set is uncountably infinite.\n\nResources:\n\nTheorem 1.3.10: The following statements are equivalent:\n\n(a) S is a countable set.\n(b) There exists a surjection of \\(\\mathbb{N}\\) onto S.\n(c) There exists an injection of S into \\(\\mathbb{N}\\)\n\nTheorem 2.5.5: The unit interval \\([0,1]:=\\{x\\in\\mathbb{R}:0\\leq x\\leq1\\}\\) is not countable.\n\nStrategy:\n\nWe will assume the Cantor set is countable and look for a contradiction.\n\nMethod:\n\nFirst: We assume that the Cantor set \\(\\mathbb{F}\\) is countably infinite.\n\nIn other words, we assume \\(\\mathbb{F}\\) can be put in bijection with \\(\\mathbb{N}\\).\n\nSecond: We recall that any point \\(x\\in[0,1]\\) can be written as a base three expansion consisting only of the digits \\(0\\), \\(1\\), and \\(2\\).\nThird: According to Proof Wiki, it is not possible for a real number in base 3 notation to be written in more than one way without using the digit \\(1\\).\n\nThis is a useful fact because the inputs of a bijective function are unique.\n\nFourth: We want to define a function with the following parts:\n\nDomain: All elements of \\([0,1]\\) that can be written without using \\(1\\). Psst… This domain is \\(\\mathbb{F}\\).\nRange: All elements of \\([0,1]\\).\nNotation: \\(f\\Bigl(\\sum^{\\infty}_{n=1}{\\frac{a_n}{3^n}}\\Bigr)=\\sum^{\\infty}_{n=1}{\\frac{\\frac{a_n}{2}}{2^n}}\\)\n\nNote: The output of the function is in binary.\n\n\nFifth: So \\(f\\) is a surjection of \\(\\mathbb{F}\\) onto \\([0,1]\\).\nSixth: We can now pull in our assumption that \\(\\mathbb{F}\\) is countable along with Theorem 1.3.10 to show that there exists a surjection of \\(\\mathbb{N}\\) onto \\(\\mathbb{F}\\).\n\nWe’ll call this function \\(g\\).\n\nSeventh: We recall that \\(g\\) \\(|\\) \\(\\mathbb{N}\\rightarrow\\mathbb{F}\\) and \\(f\\) \\(|\\) \\(\\mathbb{F}\\rightarrow[0,1]\\). From this we see that \\(f\\circ g\\) is a surjection of \\(\\mathbb{N}\\) onto \\([0,1]\\).\nEighth We can now apply Theorem 1.3.10 to show that \\([0,1]\\) is a countable set.\nNinth Now we circle back to Theorem 2.5.5 which contradicts the result of Step \\(8\\) \\(\\bigstar\\).\nTenth Now that we have found a contradiction, we can apply Reductio Ad Absurdum to eliminate \\(1\\) of the assumptions we used to get here and conclude the negation of that assumption. In our case, we conclude \\(\\mathbb{F}\\) is uncountable. \\(\\square\\)\n\n\n\\(\\mathbfcal{Thank}\\) \\(\\mathbfcal{you}\\) \\(\\mathbfcal{for}\\) \\(\\mathbfcal{viewing}\\) \\(\\mathbfcal{this}\\) \\(\\mathbfcal{Queer}\\) \\(\\mathbfcal{Educational}\\) \\(\\mathbfcal{Demonstration}\\) \\(\\mathbfcal{(Q.E.D.)}\\)\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_02/index.html",
    "href": "articles/article_02/index.html",
    "title": "Sorting an HTML Table",
    "section": "",
    "text": "The Data Input\nFor this challenge, we recieved an array of objects that contained metadata about artists who perform a music genre known as bhangra. Each object contained the three attributes:\n\nname referring to the name of each artist.\nbirthYear referring to the year each artist was born.\nlink referring to a youtube link for a video of that artist’s work.\n\n\nThis is the array we were given.\nconst artists = [\n  {\n    name: \"Ms Scandalous\",\n    birthYear: 1985,\n    link: \"https://www.youtube.com/watch?v=2FPivlfvxu0\"\n  },\n  {\n    name: \"Juggy D\",\n    birthYear: 1981,\n    link: \"https://www.youtube.com/watch?v=1jAc_-FVjdI\"\n  },\n  {\n    name: \"Sukhbir Singh\",\n    birthYear: 1969,\n    link: \"https://www.youtube.com/watch?v=HiprNF9Jad0\"\n  },\n  {\n    name: \"Abrar-ul-Haq\",\n    birthYear: 1989,\n    link: \"https://www.youtube.com/watch?v=-lnnVIP7FEc\"\n  },\n  {\n    name: \"Rishi Rich\",\n    birthYear: 1970,\n    link: \"https://www.youtube.com/watch?v=O95-w2gACuA\"\n  }\n]\n\n\n\nStep 1. Making the Table\nFirst, the students must populate a given table element to hold the data. We chose to accomplish this by systematically accumulating HTML tags as string surrounding metadata from the array and inserting the accumulation into the table element.\nfunction populateTable(array) {\n\n  let table = document.getElementById('bhangra'); // this code selects the table\n\n  // declare a string to hold the inner HTML code for the table\n  let contents = \"&lt;tbody&gt;\";\n\n  // add the header row\n  contents += `&lt;tr&gt;&lt;th&gt;name&lt;/th&gt;`;\n  contents += `&lt;th&gt;birthyear&lt;/th&gt;`;\n  contents += `&lt;th&gt;link&lt;/th&gt;&lt;/tr&gt;`;\n\n\n  array.forEach(function (artist) {\n    contents += `&lt;tr&gt;`; // open the row\n    contents += `&lt;td&gt;${artist.name}&lt;/td&gt;`;\n    contents += `&lt;td&gt;${artist.birthYear}&lt;/td&gt;`;\n    contents += `&lt;td&gt;&lt;a href= \"${artist.link}\" target=\"_blank\"&gt;${artist.link}&lt;/a&gt;&lt;/td&gt;`;\n    contents += `&lt;/tr&gt;`; // close the row\n  })\n\n\n  // close out the body of the table\n  contents += \"&lt;/tbody&gt;\";\n\n  table.innerHTML = contents; // this code populates the table with the contents string\n\n};\n\n// call the function to populate the table\npopulateTable(artists);\n\n\nStep 2. Initializing Button Elements\nSecond, we created a general function for creating button elements.\nfunction createButton(id, label, parent) {\n \n  // create a new button element\n  const newbutton = document.createElement(\"button\");\n \n  // add the text to the button\n  newbutton.innerText = label;\n \n  // add the id to the button\n  newbutton.id = id;\n \n  // append the button to the parent\n  parent.appendChild(newbutton);\n\n  // return the button\n  return newbutton;\n\n};\n\n\nStep 3. Initialize All Buttons\nThird we used the createButton() function to make buttons for each of the sorting actions we want to enable.\nconst nameButton = createButton(\"name-button\", \"Sort by Name\", document.getElementById(\"sorting\"));\n\nconst yearButton = createButton(\"year-button\", \"Sort by Year\", document.getElementById(\"sorting\"));\n\nconst randomButton = createButton(\"random-button\", \"Shuffle\", document.getElementById(\"sorting\"));\n\n\nStep 4. Create Event Listeners\nFourth, we needed to create event listeners for each button so the javascript code to sort the data would run when the buttons are pressed.\n\n\n\n\n\n\nNote\n\n\n\nThe functions referrenced in each event listener are referenced later in the document. This is not problematic because JavaScript uses asynchronous programming.\n\n\nnameButton.addEventListener('click', function () {\n  artists.sort(byName);\n});\n\nyearButton.addEventListener('click', function () {\n  artists.sort(byYear);\n});\n\nrandomButton.addEventListener('click', function () {\n  artists.sort(shuffle);\n});\n\n\nStep 5. Functions for Sorting\nFifth and finally, we needed to create a function for each sort method.\n// first a function to sort by name:\nfunction byName(a, b) {\n\n  populateTable(artists.sort(function (a, b) {\n    if (a.name &lt; b.name) return -1;\n    if (a.name &gt; b.name) return 1;\n    return 0;\n  }));\n\n};\n\n// second a function to sort by year:\nfunction byYear(a, b) {\n\n  populateTable(artists.sort(function (a, b) {\n    if (a.birthYear &lt; b.birthYear) return -1;\n    if (a.birthYear &gt; b.birthYear) return 1;\n    return 0;\n  }));\n\n};\n\n// third a function to shuffle the rows:\nfunction shuffle() {\n\n    for (let i = artists.length - 1; i &gt; 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [artists[i], artists[j]] = [artists[j], artists[i]];\n    }\n\n    populateTable(artists);\n\n};\nSome parts of the above code were adapted from suggestions by Github Copilot.\n\n\nIf you would like to see the code in action click here.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_01/index.html",
    "href": "articles/article_01/index.html",
    "title": "Day 2 Solution",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nSince you can’t be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide. For example, suppose you were given the following strategy guide:\n\nA &lt;-&gt; Y\nB &lt;-&gt; X\nC &lt;-&gt; Z\n\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6. In this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\n\nWhat would your total score be if everything goes exactly according to your strategy guide?"
  },
  {
    "objectID": "articles/article_01/index.html#instructions",
    "href": "articles/article_01/index.html#instructions",
    "title": "Day 2 Solution",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nSince you can’t be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide. For example, suppose you were given the following strategy guide:\n\nA &lt;-&gt; Y\nB &lt;-&gt; X\nC &lt;-&gt; Z\n\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6. In this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\n\nWhat would your total score be if everything goes exactly according to your strategy guide?"
  },
  {
    "objectID": "articles/article_01/index.html#javascript-solution",
    "href": "articles/article_01/index.html#javascript-solution",
    "title": "Day 2 Solution",
    "section": "Javascript Solution",
    "text": "Javascript Solution\n\nStep 1. Read in the puzzle input:\nconst fs = require('fs');\nconst Input = fs.readFileSync('Day2Input.txt', 'utf8').split('\\r\\n');\n\n\n\n\n\n\nNote\n\n\n\nDay2Input.txt is the path to the file I used to store my puzzle input. This code may need to be changed if the puzzle input file is stored in a different location.\n\n\n\n\nStep 2. Find the match points for each outcome:\nfunction getAllIndexes(arr, val) {\n    var indexes = [], i;\n    for(i = 0; i &lt; arr.length; i++)\n        if (arr[i] === val)\n            indexes.push(i);\n    return indexes;\n}\n\nlet cx = getAllIndexes(Input, 'C X').length;\n\nlet ay = getAllIndexes(Input, 'A Y').length;\n\nlet bz = getAllIndexes(Input, 'B Z').length;\n\nlet ax = getAllIndexes(Input, 'A X').length;\n\nlet by = getAllIndexes(Input, 'B Y').length;\n\nlet cz = getAllIndexes(Input, 'C Z').length;\n\nlet bx = getAllIndexes(Input, 'B X').length;\n\nlet cy = getAllIndexes(Input, 'C Y').length;\n\nlet az = getAllIndexes(Input, 'A Z').length;\n\n\nStep 3. Multiply the match outcomes by there respective point values:\nUsing the point values from the instructions we take the sum of the product of each match outcome and its point value.\nlet sum = (cx*7)+(ay*8)+(bz*9)+(ax*4)+(by*5)+(cz*6)+(bx)+(cy*2)+(az*3);"
  },
  {
    "objectID": "articles/article_01/index.html#try-it-for-yourself",
    "href": "articles/article_01/index.html#try-it-for-yourself",
    "title": "Day 2 Solution",
    "section": "Try it for yourself",
    "text": "Try it for yourself\n\n\nAfter you select your text file, the total point value will appear here!\nThe JavaScript file is here.\nSections of the browser implementation were adapted from my professor’s browser implementation of the challenge from Advent Of Code 2022 Day 1"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Rhys Tilford",
    "section": "",
    "text": "Rhys Tilford\n\nAbout Me\nI am a proud nerd as evidenced by my adoration for the show Doctor Who. In my spare time, I love catching up with my friends and hearing about their lives on long meandering walks around town. I also enjoy practicing my many hobbies. Ask me about my record player refurbishment project if we ever get to meet.\n\n\nEducation\nI was homeschooled in grades K-12 by my parents who have both worked in higher-education. (2009-2022)\nI study Mathematics, Computer Science, and Communication at Georgetown College in Kentucky. (2022-2025)\n\n\nExperience\nI work as a Resident Advisor at Georgetown College. In this role, I facilitate a smooth transition to college life for all residents. (2023-present)\nI have worked as a Mathematics Tutor both privately and in affiliation with Georgetown College. In this role, I organized lesson plans and led review sessions. (2022-2023)\n\n\n\n    \n    \n  \n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_02/article_02.html",
    "href": "articles/article_02/article_02.html",
    "title": "Solution for creating a datatable and sorting it.",
    "section": "",
    "text": "The Data Input\nFor this challenge, students recieved an array of objects that contained metadata about artists who perform a music genre known as bhangra. Each object contained the three attributes:\n\nname referring to the name of each artist.\nbirthYear referring to the year each artist was born.\nlink referring to a youtube link for a video of that artist’s work.\n\n\nThis is the array students were given.\nconst artists = [\n  {\n    name: \"Ms Scandalous\",\n    birthYear: 1985,\n    link: \"https://www.youtube.com/watch?v=2FPivlfvxu0\"\n  },\n  {\n    name: \"Juggy D\",\n    birthYear: 1981,\n    link: \"https://www.youtube.com/watch?v=1jAc_-FVjdI\"\n  },\n  {\n    name: \"Sukhbir Singh\",\n    birthYear: 1969,\n    link: \"https://www.youtube.com/watch?v=HiprNF9Jad0\"\n  },\n  {\n    name: \"Abrar-ul-Haq\",\n    birthYear: 1989,\n    link: \"https://www.youtube.com/watch?v=-lnnVIP7FEc\"\n  },\n  {\n    name: \"Rishi Rich\",\n    birthYear: 1970,\n    link: \"https://www.youtube.com/watch?v=O95-w2gACuA\"\n  }\n]\n\n\n\nMaking the Table\nFirst, the students must populate a given table element to hold the data. We chose to accomplish this by systematically accumulating HTML tags as string surrounding metadata from the array and inserting the accumulation into the table element.\n\nHere is the code we used\nfunction populateTable(array) {\n\n  let table = document.getElementById('bhangra'); // this code selects the table\n\n  // declare a string to hold the inner HTML code for the table\n  let contents = \"&lt;tbody&gt;\";\n\n  // add the header row\n  contents += `&lt;tr&gt;&lt;th&gt;name&lt;/th&gt;`;\n  contents += `&lt;th&gt;birthyear&lt;/th&gt;`;\n  contents += `&lt;th&gt;link&lt;/th&gt;&lt;/tr&gt;`;\n\n\n  array.forEach(function (artist) {\n    contents += `&lt;tr&gt;`; // open the row\n    contents += `&lt;td&gt;${artist.name}&lt;/td&gt;`;\n    contents += `&lt;td&gt;${artist.birthYear}&lt;/td&gt;`;\n    contents += `&lt;td&gt;&lt;a href= \"${artist.link}\" target=\"_blank\"&gt;${artist.link}&lt;/a&gt;&lt;/td&gt;`;\n    contents += `&lt;/tr&gt;`; // close the row\n  })\n\n\n  // close out the body of the table\n  contents += \"&lt;/tbody&gt;\";\n\n  table.innerHTML = contents; // this code populates the table with the contents string\n\n};\n\n// call the function to populate the table\npopulateTable(artists);\nSome parts of the above code were adapted from suggestions by Github Copilot.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_03/cantorMemes.html",
    "href": "articles/article_03/cantorMemes.html",
    "title": "personal-rhys-tilford",
    "section": "",
    "text": "Grave disease to the field of mathematics by inmathmemes\n\n\n\nDammit Cantor byu/daDoorMaster inmathmemes\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_03/shock.html",
    "href": "articles/article_03/shock.html",
    "title": "*gasp*",
    "section": "",
    "text": "*gasp*\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_05/index.html",
    "href": "articles/article_05/index.html",
    "title": "Google Analytics Integration",
    "section": "",
    "text": "Introduction\nOperating a website is a fascinating endeavor that opens new options for sharing information with people anywhere. With the knowledge that the site is available to anyone with a web browser, it’s only natural to wonder what kinds of people are viewing the site. In this tutorial I will show you how to connect a quarto website to Google Analytics 4.\n\n\nSetting Up Google Analytics\n\nAccount Setup\nThe first time a person opens Google Analytics it will ask them to log in with their Google account. Once the user has done that, they will be greeted by a demo data report. Now they need to create a Google Analytics account. This is an account for Google Analytics which is nested within their Google Account. Here are the steps to set up that account:\n\nOn the lower left side of the home page there should be a settings cog. When it is clicked, it reveals a popout menu showing the names of the options on the left side. Click the cog again to enter the Admin menu.\nNow there should be a pill-shaped create button in the upper left side of the admin menu. Click this button and select Account from the drop down menu.\nNow there should be a text box where the user can put their account name. Do this.\nFinally, the user is asked to decide what data-sharing permissions to grant Google. Once the preffered settings are chosen, click the next button and procede to Property Setup.\n\n\n\nProperty Setup\n\n\n\n\n\n\nNote\n\n\n\nThe following webpage taught me how to set up the property. How to Set Up a Google Analytics 4 Property\n\n\n\nNow the user should be asked to name their property.\nNext, the user must configure the timezone and currency.\nThen the user needs to select their industry category and size. If the user’s website is not a business this form can be completed randomly (I won’t tell Google if you won’t)\nNow the user is asked how they will use Google Analytics. This affects the types of default data reports that show up automatically.\nClick create and then accept the Google Analytics terms of service.\nNow click add a data stream and procede to the next section.\n\n\n\n\nSetting up Quarto YAML to Link a Data Stream\nFollow these steps to set up tracking in Google Analytics.\n\nNow the user can select Web to indicate that they are linking a webpage.\nNext the User can enter their webpage’s URL.\nThen click create stream.\nNow procede to the next step.\n\nThis step is likely the most straightforward of the whole process. In the _quarto.yml file, one merely needs to add their Google Analytics tracking ID (UA-XXXXXXXX) Google Tag measurement ID (G-xxxxxxx) as shown below.\nwebsite:\n  google-analytics: \"UA-XXXXXXXX\"\nAfter this change is deployed, It may take some time for Google Analytics to link with the site. I didn’t notice any changes for about a half hour.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_07/index.html",
    "href": "articles/article_07/index.html",
    "title": "Animating an SVG Path for a Logo",
    "section": "",
    "text": "Introduction\nIn the spring of 2018, I decided that I needed to create a unique signature that I could write quickly. This all came about becuase I was taking a dual credit art course at Georgetown College and I needed a symbol to sign my work. I wanted that this signature to be my initials to help make the symbol swifter to reproduce. After much trial and error I created a style that I liked and began to apply it in my drawings for the college course.\nSometime later, I began to see use for the symbol in new venues. I used the symbol when writing letters, signing for purchases, and even as a substitute for Q.E.D. at the end of Mathematical proofs. It was then that I began to see the symbol as an accessory of my identity and an increasingly important part of my brand.\nRecently, I decided it would be useful to create a version of my signature in a digital form so I could apply it digital mediums of communication. This project is the product of that decision.\n\n\nCreating the SVG Logo\nAfter debating between different types of images, I decided to make the signature as an SVG path. This format is especially versatile because it can be resized without degrading the image it self. This is accomplished with an elaborate list of vectors which can be resized as needed. In fact, the acronym SVG stands for Scaleable Vector Graphic.\nThe language used to create an SVG is very complicated so for the sake of time I decided to build my signiture in a visual SVG path editor. This free interface makes it very easy to build a path by dragging the points of each line segment to the desired location.\n\n\nReplacing the Default Logo with the Custom SVG\nTo replace the default branding with my signiture, I needed to find out where quarto found the title for the site in the _quarto.yml file. Luckily, someone else has tried changing the logo of their quarto website as well. This site developed by Ella Kaye has a lovely tutorial on putting a custom logo in the yaml setup material. The key is to place the html reference in the navbar title reference as depicted here.\nNotice that the HTML code in this yaml chunk does not include any styling options for the path. These will be added in the CSS file. This is why it is very important that the svg tag have a specific class. If it did not the styling rules we will use in our CSS file would apply to all svg tags in the website.\nImmediately, I ran into some issues. The default title was gone but my signiture was nowhere to be seen. After trial, error, blood, sweat, and tears, I found one setting that hid the signature from me.\n\nOverflow\nThe problem was with the overflow settings. By default the parent tags of the path were set to keep the overflow hidden. All I had to add a reference to each parent tag in the CSS file with the contents overflow: visible; as shown in this code chunk.\n\n\n\nAdjusting the Sizing and Location\nThe HTML code does include use the viewbox attribute in the SVG tag. The path is a child of the SVG element but the path only holds data and styling information. The SVG tag is the one that holds all the sizing and location information. That is stored in the viewbox attribute. It is a list of four entries:\n\nMin-x: The x-coordinate of the top left corner.\nMin-y: The y-coordinate of the top left corner.\nWidth of the viewport.\nHeight of the viewport.\n\nThe Width and Height variables are fairly self-explanatory but Min-x and Min-y are worth discussing in more depth. These two coodinates set the position of the view port. We can imagine the viewport as our screen when we’ve zoomed in really close in the svg path editor and maneuvered the graph so that the point we see in the top left corner of our screen has the coordinates (Min-x, Min-y).\n\n\nCreating the Animation\nCreating the animation is one of the more straight forward parts of this project. We will focus on two path attributes:\n\nstroke-dasharray\n\nThis command creates a series of dashes interspersed with blank spaces of equal length along the path. It takes one numeric argument representing the length of each dash.\n\nstroke-dashoffset\n\nThis command allows the programmer to move the series of dashes forward or backward along the path. it takes one numeric argument representing the distance that the series of dashes should be moved.\n\n\nFor a visual and interactive example of these two commands in action, check out this tutorial from Cassie Codes.\nThis animation is built by choosing a value for stroke-dasharray (the length of each dash) wide enough to make it so one dash can entirely fill the path. The space would also fill the path since the length of each dash is equal to the length of each space.\nThe next trick of this animation is finding the two values of stroke-dashoffset where the path is entirely full and another where it is entirely space. Then we can use the commands animation and @keyframes as seen in the css code to create the animation.\n\n\nBrighten on Hover\nThe the color of my logo brightens slightly when the mouse hovers over it. This was accomplished by creating a css rule for the path element that only activates when the mouse is hovering over the div tag with the class navbar-brand-container.\n\n\nCSS Code\nsvg.logo path {\n    fill: none;\n    overflow: visible;\n    stroke: rgba(255,255,255,.7);\n    stroke-width: 2;\n    stroke-dasharray: 1800;\n    stroke-dashoffset: 1800;\n    animation: draw 1.5s linear forwards;\n    d: path(\"M-116-126C-116-94-118-31-109 1-99 42-83 63-62 81-49 93-30 103-10 103 14 103 30 95 38 71Q46 39 29.927 15.408C29 14 27 11 21.642 10.618 17.841 10.238 14 12 12 15 10 18 9.783 22.63 11.455 25.062 12.899 27.267 14.724 28.483 17.765 29.319 22 30 23.846 29.699 28.255 27.039 40 19 42 15 50 11 54 9 60 9 64 11 68 13 70 15 72 19 74 25 73 28 70 31 66 35 60 38 54 41 47 45 46 54 46 59 46 64 49.009 73.411 51.061 76.984 55 84 60 89 64 92 69 96 76 103 98 103 112 103 120 97 122 95 124 93 130 88 134 79 138 68 140 61 140 53 140 45 140 33 138 27 136 21.6666 132 13 122 11 112 9 106 11 102 15 98 19 96 25 98 31 100 37 104 41 116 43 128 45 144 45 160 39 178 33 190.242 25.396 201 6 205.333-1.489 209-13 211-23Q215.994-45.639 217.126-66.771C218-84 219-93 219-119\")\n}\n\n@keyframes draw {\n    to  {\n        stroke-dashoffset: 0;\n    }\n}\n\ndiv.navbar-brand-container:hover path {\n    stroke: rgba(255,255,255,.8);\n}\n\nsvg.logo{\n    overflow: visible;\n}\n\n.navbar-title {\n    overflow: visible;\n    padding: 25px;\n}\n\n.navbar-brand {\n    overflow: visible;\n    padding: 15px;\n}\n\n\nYaml Code\nwebsite:\n  title: \"personal-rhys-tilford\"\n  site-url: \"https://rctilford.github.io/personal-rhys-tilford/\"\n  navbar:\n    title: \"&lt;svg class='logo' viewbox='65 55 100 10'&gt;&lt;path&gt;&lt;/path&gt;&lt;/svg&gt;\"\n\n\n\n\n Back to top"
  }
]