[
  {
    "objectID": "posts/post_04/index.html",
    "href": "posts/post_04/index.html",
    "title": "Animating an SVG Path for a Logo",
    "section": "",
    "text": "I’ll fill this in once I actually figure out how to complete this project :-)\n\n\nCitations\nThese sites were very helpful while I was working on this project:\n\nVisual SVG Path Editor\npath() Documentation\n&lt;path&gt; Documentation\nQuarto Logo SVG Input\nStyling the Path\nGeneral Info About Paths\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/post_02/index.html",
    "href": "posts/post_02/index.html",
    "title": "Tidying Unkempt Data",
    "section": "",
    "text": "Plot = import(\"https://esm.run/@observablehq/plot@0.6.11\")\n\n\n\n\n\n\n\nIntroduction\nTransport has always been a passion of mine. I have always adored Trains, Planes, Cars, Boats, and any other type of vehicle. As I matured I began to see transit through a new lens. The sights and sounds of large transport-oriented machinary no longer held my attention like they once did. A more humanistic view of transport caught my fancy and I began to take interest in transport equity for people from all socio-economic backgrounds.\nIt is well known that the automobile is a focal point in American society. That said, I was well into my teens before I noticed the consequences our car-centric culture causes for people who either can’t afford to own a car or choose not to own a car. This realization invigorated my interest in public transport and walkable infrastructure. In this data exploration, I hope to shed some light on the state of urban rail transport systems in America and compare them to that of other first world countries.\n\n\nThe Data\nI found a fascinating data table on this Wikipedia page so I decided to pull it and analize it. Here is the code I used to pull it:\n\nweb_page &lt;- \"https://en.wikipedia.org/wiki/List_of_metro_systems\"\n\nTables &lt;-\n  web_page %&gt;%\n  read_html() %&gt;%\n  html_elements(\"table\")\n\nMetroList &lt;- \n  Tables %&gt;% \n  purrr::pluck(1) %&gt;%\n  html_table()\n\nMuch to my dismay the data was riddled with miscellaneous junk. Here is the data inside MetroList:\n\n\n\n\n\n\n\nHere are the problems I see in MetroList:\n\nThe name of the column that holds the number of stations on each system has a long and irrelevent name.\nSeveral of the columns have units and footnote links in them.\n\nI decided to import it to Rstudio and take a crack at cleaning it.\n\n\nTidying\nOptimistically, I decided to call this new table TidyMetroList.\n\nRenaming Columns\nThe following code renames the columns with a unified naming system:\n\nTidyMetroList &lt;-\n  MetroList %&gt;%\n  set_names(c(\"City\",\n              \"Country\",\n              \"Name\",\n              \"ServiceOpened\",\n              \"LastExpanded\",\n              \"StationCount\",\n              \"Lines\",\n              \"SystemLength\",\n              \"RidershipMillions\"))\n\n\n\n\n\n\n\n\nMuch better! There’s still a long way to go though. Next we should tackle the extra gunk in the columns.\n\n\nIsolating the Data\nThis code uses regular expresssions to remove all of the gunk in the columns:\n\nTidyMetroList &lt;-\n  TidyMetroList %&gt;%\n  mutate(ServiceOpened = as.numeric(str_replace_all(ServiceOpened, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\")),\n         LastExpanded = as.numeric(str_replace_all(LastExpanded, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\")),\n         Country = str_replace_all(Country, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\"),\n         Name = str_replace_all(Name, \"\\\\[[\\\\w\\\\s]+\\\\]|\\\\([\\\\w\\\\s]+\\\\)\", \"\"),\n         StationCount = as.numeric(str_replace_all(StationCount, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\")),\n         SystemLength = str_replace_all(SystemLength, \"\\\\skm\\\\s|\\\\d+(\\\\.\\\\d+)?.mi|\\\\[[\\\\w+\\\\s+]+\\\\]|[\\\\(\\\\)]+\", \"\"))\n\n\n\n\n\n\n\n\nLovely! Now there’s only one problem. Notice that the RidershipMillions column still was not dealt with in the last command. That’s because the parenthetical statements in that column show the timeframe in which the ridership data was collected. We’d rather not get rid of this data so hastily.\n\n\nA Special Case\nThe following code will snatch the data from the parenthesis and drop it in a new column called RidershipMillionsDataFrom. Then it will remove the excess information from RidershipMillions like we did above.\n\nTidyMetroList &lt;-\n  TidyMetroList %&gt;%\n  mutate(RidershipMillionsDataFrom = str_extract(RidershipMillions, \"(?&lt;=\\\\().+(?=\\\\))\"),\n         RidershipMillions = as.numeric(str_replace_all(RidershipMillions, \"\\\\[[\\\\w+\\\\s+]+\\\\]|(\\\\().+(\\\\))\", \"\")))\n\n\n\n\n\n\n\n\n\n\n\nData Analysis\n\n\nData Visualization\n\nPlot.plot({\n  color: { legend: true },\n  title: \"Transit System Maturity\",\n  subtitle: \"Urban Rail System Maturity in 5 Major Countries\",\n  y: { label: \"Years\" },\n  marks: [\n    Plot.frame({ strokeOpacity: 0.1 }),\n    Plot.barY(await FileAttachment(\"MetroMaturity.csv\").csv({ typed: \"auto\" }), {\n      fx: \" \",\n      x: \"Country\",\n      y: \"Values\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  color: { legend: true },\n  title: \"Average Ridership in 5 Major Countries\",\n  y: { label: \"Millions of Riders\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroRidership.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average Ridership (Millions)\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  color: { legend: true },\n  title: \"Average Distance Between Stations\",\n  y: { label: \"Kilometers per Station\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroSize.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average Station Density\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  color: { legend: true },\n  title: \"Average System Length\",\n  y: { label: \"Kilometers of Rail Service\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroSize.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average System Length\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  color: { legend: true },\n  title: \"Average Number of Stations per System\",\n  y: { label: \"Stations\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroSize.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average Number of Stations\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n\n\n\n\n\n\n\n\nAnimating an SVG Path for a Logo\n\n\n\nCSS\n\n\nHTML\n\n\nQuarto\n\n\n\n\n\n\n\nRhys Tilford\n\n\nNov 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nCSS Image Zoom on Hover\n\n\n\nCSS\n\n\nHTML\n\n\nQuarto\n\n\n\n\n\n\n\nRhys Tilford\n\n\nNov 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 2 Solution\n\n\n\nJS\n\n\nJust For Fun\n\n\nProgramming\n\n\n\nRead about my solution to Day 2 of the 2022 Advent of Code Challenge.\n\n\n\nRhys Tilford\n\n\nNov 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidying Unkempt Data\n\n\n\nData Analysis\n\n\nProgramming\n\n\nR\n\n\n\nRead about how I used R to tidy and display urban transport data\n\n\n\nRhys Tilford\n\n\nNov 13, 2023\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "This page includes several articles that document various projects I’ve made and presentations I’ve given.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n\n\n\n\n\n\n\n\nAnimating an SVG Path for a Logo\n\n\n\nCSS\n\n\nHTML\n\n\nQuarto\n\n\n\n\n\n\n\nRhys Tilford\n\n\nNov 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nCSS Image Zoom on Hover\n\n\n\nCSS\n\n\nHTML\n\n\nQuarto\n\n\n\n\n\n\n\nRhys Tilford\n\n\nNov 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nCantor Set Presentation\n\n\n\nEducation\n\n\nMath\n\n\nTopology\n\n\n\nRead my presentation of everything I have learned about the Cantor Set.\n\n\n\nRhys Tilford\n\n\nNov 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDay 2 Solution\n\n\n\nJS\n\n\nJust For Fun\n\n\nProgramming\n\n\n\nRead about my solution to Day 2 of the 2022 Advent of Code Challenge.\n\n\n\nRhys Tilford\n\n\nNov 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle Analytics Integration\n\n\n\nData Analysis\n\n\nProgramming\n\n\nTutorial\n\n\n\nRead about how I set up Google Analytics for Quarto\n\n\n\nRhys Tilford\n\n\nNov 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nSorting an HTML Table\n\n\n\nHTML\n\n\nJS\n\n\nProgramming\n\n\n\nRead about how I used javascript to populate and sort an HTML table.\n\n\n\nRhys Tilford\n\n\nNov 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidying Unkempt Data\n\n\n\nData Analysis\n\n\nProgramming\n\n\nR\n\n\n\nRead about how I used R to tidy and display urban transport data\n\n\n\nRhys Tilford\n\n\nNov 13, 2023\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_06/index.html",
    "href": "articles/article_06/index.html",
    "title": "CSS Image Zoom on Hover",
    "section": "",
    "text": "Introduction\nI wanted to make some slick effects for the website so it looks more professional. I found a tutorial on pinterest for a zoom effect on hover. However, I ran into several problems when I applied the code so I will show how I fixed those problems here.\n\n\nFinding the Element\nIn order to make any changes to the element we have to find it’s container. To do this we need to open the developer tools our browser while we are viewing the webpage we want to modify.\n\n\nCitation\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_04/index.html",
    "href": "articles/article_04/index.html",
    "title": "Tidying Unkempt Data",
    "section": "",
    "text": "Plot = import(\"https://esm.run/@observablehq/plot@0.6.11\")\n\n\n\n\n\n\n\nIntroduction\nTransport has always been a passion of mine. I have always adored Trains, Planes, Cars, Boats, and any other type of vehicle. As I matured I began to see transit through a new lens. The sights and sounds of large transport-oriented machinary no longer held my attention like they once did. A more humanistic view of transport caught my fancy and I began to take interest in transport equity for people from all socio-economic backgrounds.\nIt is well known that the automobile is a focal point in American society. That said, I was well into my teens before I noticed the consequences our car-centric culture causes for people who either can’t afford to own a car or choose not to own a car. This realization invigorated my interest in public transport and walkable infrastructure. In this data exploration, I hope to shed some light on the state of urban rail transport systems in America and compare them to that of other first world countries.\n\n\nThe Data\nI found a fascinating data table on this Wikipedia page so I decided to pull it and analize it. Here is the code I used to pull it:\n\nweb_page &lt;- \"https://en.wikipedia.org/wiki/List_of_metro_systems\"\n\nTables &lt;-\n  web_page %&gt;%\n  read_html() %&gt;%\n  html_elements(\"table\")\n\nMetroList &lt;- \n  Tables %&gt;% \n  purrr::pluck(1) %&gt;%\n  html_table()\n\nMuch to my dismay the data was riddled with miscellaneous junk. Here is the data inside MetroList:\n\n\n\n\n\n\n\nHere are the problems I see in MetroList:\n\nThe name of the column that holds the number of stations on each system has a long and irrelevent name.\nSeveral of the columns have units and footnote links in them.\n\nI decided to import it to Rstudio and take a crack at cleaning it.\n\n\nTidying\nOptimistically, I decided to call this new table TidyMetroList.\n\nRenaming Columns\nThe following code renames the columns with a unified naming system:\n\nTidyMetroList &lt;-\n  MetroList %&gt;%\n  set_names(c(\"City\",\n              \"Country\",\n              \"Name\",\n              \"ServiceOpened\",\n              \"LastExpanded\",\n              \"StationCount\",\n              \"Lines\",\n              \"SystemLength\",\n              \"RidershipMillions\"))\n\n\n\n\n\n\n\n\nMuch better! There’s still a long way to go though. Next we should tackle the extra gunk in the columns.\n\n\nIsolating the Data\nThis code uses regular expresssions to remove all of the gunk in the columns:\n\nTidyMetroList &lt;-\n  TidyMetroList %&gt;%\n  mutate(ServiceOpened = as.numeric(str_replace_all(ServiceOpened, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\")),\n         LastExpanded = as.numeric(str_replace_all(LastExpanded, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\")),\n         Country = str_replace_all(Country, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\"),\n         Name = str_replace_all(Name, \"\\\\[[\\\\w\\\\s]+\\\\]|\\\\([\\\\w\\\\s]+\\\\)\", \"\"),\n         StationCount = as.numeric(str_replace_all(StationCount, \"\\\\[[\\\\w+\\\\s+]+\\\\]\", \"\")),\n         SystemLength = str_replace_all(SystemLength, \"\\\\skm\\\\s|\\\\d+(\\\\.\\\\d+)?.mi|\\\\[[\\\\w+\\\\s+]+\\\\]|[\\\\(\\\\)]+\", \"\"))\n\n\n\n\n\n\n\n\nLovely! Now there’s only one problem. Notice that the RidershipMillions column still was not dealt with in the last command. That’s because the parenthetical statements in that column show the timeframe in which the ridership data was collected. We’d rather not get rid of this data so hastily.\n\n\nA Special Case\nThe following code will snatch the data from the parenthesis and drop it in a new column called RidershipMillionsDataFrom. Then it will remove the excess information from RidershipMillions like we did above.\n\nTidyMetroList &lt;-\n  TidyMetroList %&gt;%\n  mutate(RidershipMillionsDataFrom = str_extract(RidershipMillions, \"(?&lt;=\\\\().+(?=\\\\))\"),\n         RidershipMillions = as.numeric(str_replace_all(RidershipMillions, \"\\\\[[\\\\w+\\\\s+]+\\\\]|(\\\\().+(\\\\))\", \"\")))\n\n\n\n\n\n\n\n\n\n\n\nData Analysis\n\n\nData Visualization\n\nPlot.plot({\n  color: { legend: true },\n  title: \"Transit System Maturity\",\n  subtitle: \"Urban Rail System Maturity in 5 Major Countries\",\n  y: { label: \"Years\" },\n  marks: [\n    Plot.frame({ strokeOpacity: 0.1 }),\n    Plot.barY(await FileAttachment(\"MetroMaturity.csv\").csv({ typed: \"auto\" }), {\n      fx: \" \",\n      x: \"Country\",\n      y: \"Values\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  color: { legend: true },\n  title: \"Average Ridership in 5 Major Countries\",\n  y: { label: \"Millions of Riders\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroRidership.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average Ridership (Millions)\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  color: { legend: true },\n  title: \"Average Distance Between Stations\",\n  y: { label: \"Kilometers per Station\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroSize.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average Station Density\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  color: { legend: true },\n  title: \"Average System Length\",\n  y: { label: \"Kilometers of Rail Service\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroSize.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average System Length\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  color: { legend: true },\n  title: \"Average Number of Stations per System\",\n  y: { label: \"Stations\" },\n  marks: [\n    Plot.barY(await FileAttachment(\"MetroSize.csv\").csv({ typed: \"auto\" }), {\n      x: \"Country\",\n      y: \"Average Number of Stations\",\n      fill: \"Country\",\n      tip: true\n    }),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_02/index.html",
    "href": "articles/article_02/index.html",
    "title": "Sorting an HTML Table",
    "section": "",
    "text": "The Data Input\nFor this challenge, we recieved an array of objects that contained metadata about artists who perform a music genre known as bhangra. Each object contained the three attributes:\n\nname referring to the name of each artist.\nbirthYear referring to the year each artist was born.\nlink referring to a youtube link for a video of that artist’s work.\n\n\nThis is the array we were given.\nconst artists = [\n  {\n    name: \"Ms Scandalous\",\n    birthYear: 1985,\n    link: \"https://www.youtube.com/watch?v=2FPivlfvxu0\"\n  },\n  {\n    name: \"Juggy D\",\n    birthYear: 1981,\n    link: \"https://www.youtube.com/watch?v=1jAc_-FVjdI\"\n  },\n  {\n    name: \"Sukhbir Singh\",\n    birthYear: 1969,\n    link: \"https://www.youtube.com/watch?v=HiprNF9Jad0\"\n  },\n  {\n    name: \"Abrar-ul-Haq\",\n    birthYear: 1989,\n    link: \"https://www.youtube.com/watch?v=-lnnVIP7FEc\"\n  },\n  {\n    name: \"Rishi Rich\",\n    birthYear: 1970,\n    link: \"https://www.youtube.com/watch?v=O95-w2gACuA\"\n  }\n]\n\n\n\nStep 1. Making the Table\nFirst, the students must populate a given table element to hold the data. We chose to accomplish this by systematically accumulating HTML tags as string surrounding metadata from the array and inserting the accumulation into the table element.\nfunction populateTable(array) {\n\n  let table = document.getElementById('bhangra'); // this code selects the table\n\n  // declare a string to hold the inner HTML code for the table\n  let contents = \"&lt;tbody&gt;\";\n\n  // add the header row\n  contents += `&lt;tr&gt;&lt;th&gt;name&lt;/th&gt;`;\n  contents += `&lt;th&gt;birthyear&lt;/th&gt;`;\n  contents += `&lt;th&gt;link&lt;/th&gt;&lt;/tr&gt;`;\n\n\n  array.forEach(function (artist) {\n    contents += `&lt;tr&gt;`; // open the row\n    contents += `&lt;td&gt;${artist.name}&lt;/td&gt;`;\n    contents += `&lt;td&gt;${artist.birthYear}&lt;/td&gt;`;\n    contents += `&lt;td&gt;&lt;a href= \"${artist.link}\" target=\"_blank\"&gt;${artist.link}&lt;/a&gt;&lt;/td&gt;`;\n    contents += `&lt;/tr&gt;`; // close the row\n  })\n\n\n  // close out the body of the table\n  contents += \"&lt;/tbody&gt;\";\n\n  table.innerHTML = contents; // this code populates the table with the contents string\n\n};\n\n// call the function to populate the table\npopulateTable(artists);\n\n\nStep 2. Initializing Button Elements\nSecond, we created a general function for creating button elements.\nfunction createButton(id, label, parent) {\n \n  // create a new button element\n  const newbutton = document.createElement(\"button\");\n \n  // add the text to the button\n  newbutton.innerText = label;\n \n  // add the id to the button\n  newbutton.id = id;\n \n  // append the button to the parent\n  parent.appendChild(newbutton);\n\n  // return the button\n  return newbutton;\n\n};\n\n\nStep 3. Initialize All Buttons\nThird we used the createButton() function to make buttons for each of the sorting actions we want to enable.\nconst nameButton = createButton(\"name-button\", \"Sort by Name\", document.getElementById(\"sorting\"));\n\nconst yearButton = createButton(\"year-button\", \"Sort by Year\", document.getElementById(\"sorting\"));\n\nconst randomButton = createButton(\"random-button\", \"Shuffle\", document.getElementById(\"sorting\"));\n\n\nStep 4. Create Event Listeners\nFourth, we needed to create event listeners for each button so the javascript code to sort the data would run when the buttons are pressed.\n\n\n\n\n\n\nNote\n\n\n\nThe functions referrenced in each event listener are referenced later in the document. This is not problematic because JavaScript uses asynchronous programming.\n\n\nnameButton.addEventListener('click', function () {\n  artists.sort(byName);\n});\n\nyearButton.addEventListener('click', function () {\n  artists.sort(byYear);\n});\n\nrandomButton.addEventListener('click', function () {\n  artists.sort(shuffle);\n});\n\n\nStep 5. Functions for Sorting\nFifth and finally, we needed to create a function for each sort method.\n// first a function to sort by name:\nfunction byName(a, b) {\n\n  populateTable(artists.sort(function (a, b) {\n    if (a.name &lt; b.name) return -1;\n    if (a.name &gt; b.name) return 1;\n    return 0;\n  }));\n\n};\n\n// second a function to sort by year:\nfunction byYear(a, b) {\n\n  populateTable(artists.sort(function (a, b) {\n    if (a.birthYear &lt; b.birthYear) return -1;\n    if (a.birthYear &gt; b.birthYear) return 1;\n    return 0;\n  }));\n\n};\n\n// third a function to shuffle the rows:\nfunction shuffle() {\n\n    for (let i = artists.length - 1; i &gt; 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [artists[i], artists[j]] = [artists[j], artists[i]];\n    }\n\n    populateTable(artists);\n\n};\nSome parts of the above code were adapted from suggestions by Github Copilot.\n\n\nIf you would like to see the code in action click here.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_01/index.html",
    "href": "articles/article_01/index.html",
    "title": "Day 2 Solution",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nSince you can’t be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide. For example, suppose you were given the following strategy guide:\n\nA &lt;-&gt; Y\nB &lt;-&gt; X\nC &lt;-&gt; Z\n\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6. In this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\n\nWhat would your total score be if everything goes exactly according to your strategy guide?"
  },
  {
    "objectID": "articles/article_01/index.html#instructions",
    "href": "articles/article_01/index.html#instructions",
    "title": "Day 2 Solution",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nSince you can’t be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide. For example, suppose you were given the following strategy guide:\n\nA &lt;-&gt; Y\nB &lt;-&gt; X\nC &lt;-&gt; Z\n\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6. In this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\n\nWhat would your total score be if everything goes exactly according to your strategy guide?"
  },
  {
    "objectID": "articles/article_01/index.html#javascript-solution",
    "href": "articles/article_01/index.html#javascript-solution",
    "title": "Day 2 Solution",
    "section": "Javascript Solution",
    "text": "Javascript Solution\n\nStep 1. Read in the puzzle input:\nconst fs = require('fs');\nconst Input = fs.readFileSync('Day2Input.txt', 'utf8').split('\\r\\n');\n\n\n\n\n\n\nNote\n\n\n\nDay2Input.txt is the path to the file I used to store my puzzle input. This code may need to be changed if the puzzle input file is stored in a different location.\n\n\n\n\nStep 2. Find the match points for each outcome:\nfunction getAllIndexes(arr, val) {\n    var indexes = [], i;\n    for(i = 0; i &lt; arr.length; i++)\n        if (arr[i] === val)\n            indexes.push(i);\n    return indexes;\n}\n\nlet cx = getAllIndexes(Input, 'C X').length;\n\nlet ay = getAllIndexes(Input, 'A Y').length;\n\nlet bz = getAllIndexes(Input, 'B Z').length;\n\nlet ax = getAllIndexes(Input, 'A X').length;\n\nlet by = getAllIndexes(Input, 'B Y').length;\n\nlet cz = getAllIndexes(Input, 'C Z').length;\n\nlet bx = getAllIndexes(Input, 'B X').length;\n\nlet cy = getAllIndexes(Input, 'C Y').length;\n\nlet az = getAllIndexes(Input, 'A Z').length;\n\n\nStep 3. Multiply the match outcomes by there respective point values:\nUsing the point values from the instructions we take the sum of the product of each match outcome and its point value.\nlet sum = (cx*7)+(ay*8)+(bz*9)+(ax*4)+(by*5)+(cz*6)+(bx)+(cy*2)+(az*3);"
  },
  {
    "objectID": "articles/article_01/index.html#try-it-for-yourself",
    "href": "articles/article_01/index.html#try-it-for-yourself",
    "title": "Day 2 Solution",
    "section": "Try it for yourself",
    "text": "Try it for yourself\n\n\nAfter you select your text file, the total point value will appear here!\nThe JavaScript file is here.\nSections of the browser implementation were adapted from my professor’s browser implementation of the challenge from Advent Of Code 2022 Day 1"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Rhys Tilford",
    "section": "",
    "text": "Rhys Tilford\n\nAbout Me\nI am a proud nerd as evidenced by my adoration for the show Doctor Who. In my spare time, I love catching up with my friends and hearing about their lives on long meandering walks around town. I also enjoy practicing my many hobbies. Ask me about my record player refurbishment project if we ever get to meet.\n\n\nEducation\nI was homeschooled in grades K-12 by my parents who have both worked in higher-education. (2009-2022)\nI study Mathematics, Computer Science, and Communication at Georgetown College in Kentucky. (2022-2025)\n\n\nExperience\nI work as a Resident Advisor at Georgetown College. In this role, I facilitate a smooth transition to college life for all residents. (2023-present)\nI have worked as a Mathematics Tutor both privately and in affiliation with Georgetown College. In this role, I organized lesson plans and led review sessions. (2022-2023)\n\n\n\n    \n    \n  \n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_02/article_02.html",
    "href": "articles/article_02/article_02.html",
    "title": "Solution for creating a datatable and sorting it.",
    "section": "",
    "text": "The Data Input\nFor this challenge, students recieved an array of objects that contained metadata about artists who perform a music genre known as bhangra. Each object contained the three attributes:\n\nname referring to the name of each artist.\nbirthYear referring to the year each artist was born.\nlink referring to a youtube link for a video of that artist’s work.\n\n\nThis is the array students were given.\nconst artists = [\n  {\n    name: \"Ms Scandalous\",\n    birthYear: 1985,\n    link: \"https://www.youtube.com/watch?v=2FPivlfvxu0\"\n  },\n  {\n    name: \"Juggy D\",\n    birthYear: 1981,\n    link: \"https://www.youtube.com/watch?v=1jAc_-FVjdI\"\n  },\n  {\n    name: \"Sukhbir Singh\",\n    birthYear: 1969,\n    link: \"https://www.youtube.com/watch?v=HiprNF9Jad0\"\n  },\n  {\n    name: \"Abrar-ul-Haq\",\n    birthYear: 1989,\n    link: \"https://www.youtube.com/watch?v=-lnnVIP7FEc\"\n  },\n  {\n    name: \"Rishi Rich\",\n    birthYear: 1970,\n    link: \"https://www.youtube.com/watch?v=O95-w2gACuA\"\n  }\n]\n\n\n\nMaking the Table\nFirst, the students must populate a given table element to hold the data. We chose to accomplish this by systematically accumulating HTML tags as string surrounding metadata from the array and inserting the accumulation into the table element.\n\nHere is the code we used\nfunction populateTable(array) {\n\n  let table = document.getElementById('bhangra'); // this code selects the table\n\n  // declare a string to hold the inner HTML code for the table\n  let contents = \"&lt;tbody&gt;\";\n\n  // add the header row\n  contents += `&lt;tr&gt;&lt;th&gt;name&lt;/th&gt;`;\n  contents += `&lt;th&gt;birthyear&lt;/th&gt;`;\n  contents += `&lt;th&gt;link&lt;/th&gt;&lt;/tr&gt;`;\n\n\n  array.forEach(function (artist) {\n    contents += `&lt;tr&gt;`; // open the row\n    contents += `&lt;td&gt;${artist.name}&lt;/td&gt;`;\n    contents += `&lt;td&gt;${artist.birthYear}&lt;/td&gt;`;\n    contents += `&lt;td&gt;&lt;a href= \"${artist.link}\" target=\"_blank\"&gt;${artist.link}&lt;/a&gt;&lt;/td&gt;`;\n    contents += `&lt;/tr&gt;`; // close the row\n  })\n\n\n  // close out the body of the table\n  contents += \"&lt;/tbody&gt;\";\n\n  table.innerHTML = contents; // this code populates the table with the contents string\n\n};\n\n// call the function to populate the table\npopulateTable(artists);\nSome parts of the above code were adapted from suggestions by Github Copilot.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_03/index.html",
    "href": "articles/article_03/index.html",
    "title": "Cantor Set Presentation",
    "section": "",
    "text": "The Definition\n\n11.1.10 Definition The Cantor set \\(\\mathbb{F}\\) is the intersection of the sets \\(F_n,n\\in\\mathbb{N}\\), obtained by successive removal of open middle thirds, starting with \\([0,1]\\).\n– Bartle and Sherbert (p. 331)\n\n\n\nVisualization\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis visual is generated from the Wolfram Cloud: Use this link to access it.\n\n\n\n\nProving Key Properties\n\nProperty 1: The total length of the removed intervals is 1\n\nProof:\nWe will construct a convergent geometric series of the lengths of the removed open middle thirds.\nFor example we see from the visual that the length of the first open middle third is:\nFrom the definition of the Cantor set \\(\\mathbb{F}\\), we see that the first open middle third\n\n\n\nProperty 2: The Cantor set \\(\\mathbb{F}\\) contains no nonempty open interval as a subset\n\nProof:\n\n\n\nProperty 3: The Cantor set \\(\\mathbb{F}\\) has infinitely (even uncountably) many points\n\nProof:\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_05/index.html",
    "href": "articles/article_05/index.html",
    "title": "Google Analytics Integration",
    "section": "",
    "text": "Introduction\nOperating a website is a fascinating endeavor that opens new options for sharing information with people anywhere. With the knowledge that the site is available to anyone with a web browser, it’s only natural to wonder what kinds of people are viewing the site. In this tutorial I will show you how to connect a quarto website to Google Analytics 4.\n\n\nSetting Up Google Analytics\n\nAccount Setup\nThe first time a person opens Google Analytics it will ask them to log in with their Google account. Once the user has done that, they will be greeted by a demo data report. Now they need to create a Google Analytics account. This is an account for Google Analytics which is nested within their Google Account. Here are the steps to set up that account:\n\nOn the lower left side of the home page there should be a settings cog. When it is clicked, it reveals a popout menu showing the names of the options on the left side. Click the cog again to enter the Admin menu.\nNow there should be a pill-shaped create button in the upper left side of the admin menu. Click this button and select Account from the drop down menu.\nNow there should be a text box where the user can put their account name. Do this.\nFinally, the user is asked to decide what data-sharing permissions to grant Google. Once the preffered settings are chosen, click the next button and procede to Property Setup.\n\n\n\nProperty Setup\n\n\n\n\n\n\nNote\n\n\n\nThe following webpage taught me how to set up the property. How to Set Up a Google Analytics 4 Property\n\n\n\nNow the user should be asked to name their property.\nNext, the user must configure the timezone and currency.\nThen the user needs to select their industry category and size. If the user’s website is not a business this form can be completed randomly (I won’t tell Google if you won’t)\nNow the user is asked how they will use Google Analytics. This affects the types of default data reports that show up automatically.\nClick create and then accept the Google Analytics terms of service.\nNow click add a data stream and procede to the next section.\n\n\n\n\nSetting up Quarto YAML to Link a Data Stream\nFollow these steps to set up tracking in Google Analytics.\n\nNow the user can select Web to indicate that they are linking a webpage.\nNext the User can enter their webpage’s URL.\nThen click create stream.\nNow procede to the next step.\n\nThis step is likely the most straightforward of the whole process. In the _quarto.yml file, one merely needs to add their Google Analytics tracking ID (UA-XXXXXXXX) Google Tag measurement ID (G-xxxxxxx) as shown below.\nwebsite:\n  google-analytics: \"UA-XXXXXXXX\"\nAfter this change is deployed, It may take some time for Google Analytics to link with the site. I didn’t notice any changes for about a half hour.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/article_07/index.html",
    "href": "articles/article_07/index.html",
    "title": "Animating an SVG Path for a Logo",
    "section": "",
    "text": "I’ll fill this in once I actually figure out how to complete this project :-)\n\n\nCitations\nThese sites were very helpful while I was working on this project:\n\nVisual SVG Path Editor\npath() Documentation\n&lt;path&gt; Documentation\nQuarto Logo SVG Input\nStyling the Path\nGeneral Info About Paths\nAnimation Implementation\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/post_01/index.html",
    "href": "posts/post_01/index.html",
    "title": "Day 2 Solution",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nSince you can’t be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide. For example, suppose you were given the following strategy guide:\n\nA &lt;-&gt; Y\nB &lt;-&gt; X\nC &lt;-&gt; Z\n\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6. In this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\n\nWhat would your total score be if everything goes exactly according to your strategy guide?"
  },
  {
    "objectID": "posts/post_01/index.html#instructions",
    "href": "posts/post_01/index.html#instructions",
    "title": "Day 2 Solution",
    "section": "",
    "text": "The Elves begin to set up camp on the beach. To decide whose tent gets to be closest to the snack storage, a giant Rock Paper Scissors tournament is already in progress.\nRock Paper Scissors is a game between two players. Each game contains many rounds; in each round, the players each simultaneously choose one of Rock, Paper, or Scissors using a hand shape. Then, a winner for that round is selected: Rock defeats Scissors, Scissors defeats Paper, and Paper defeats Rock. If both players choose the same shape, the round instead ends in a draw.\nAppreciative of your help yesterday, one Elf gives you an encrypted strategy guide (your puzzle input) that they say will be sure to help you win. “The first column is what your opponent is going to play: A for Rock, B for Paper, and C for Scissors. The second column–” Suddenly, the Elf is called away to help with someone’s tent.\nThe second column, you reason, must be what you should play in response: X for Rock, Y for Paper, and Z for Scissors. Winning every time would be suspicious, so the responses must have been carefully chosen.\nThe winner of the whole tournament is the player with the highest score. Your total score is the sum of your scores for each round. The score for a single round is the score for the shape you selected (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for the outcome of the round (0 if you lost, 3 if the round was a draw, and 6 if you won).\nSince you can’t be sure if the Elf is trying to help you or trick you, you should calculate the score you would get if you were to follow the strategy guide. For example, suppose you were given the following strategy guide:\n\nA &lt;-&gt; Y\nB &lt;-&gt; X\nC &lt;-&gt; Z\n\nThis strategy guide predicts and recommends the following:\n\nIn the first round, your opponent will choose Rock (A), and you should choose Paper (Y). This ends in a win for you with a score of 8 (2 because you chose Paper + 6 because you won).\nIn the second round, your opponent will choose Paper (B), and you should choose Rock (X). This ends in a loss for you with a score of 1 (1 + 0).\nThe third round is a draw with both players choosing Scissors, giving you a score of 3 + 3 = 6. In this example, if you were to follow the strategy guide, you would get a total score of 15 (8 + 1 + 6).\n\nWhat would your total score be if everything goes exactly according to your strategy guide?"
  },
  {
    "objectID": "posts/post_01/index.html#javascript-solution",
    "href": "posts/post_01/index.html#javascript-solution",
    "title": "Day 2 Solution",
    "section": "Javascript Solution",
    "text": "Javascript Solution\n\nStep 1. Read in the puzzle input:\nconst fs = require('fs');\nconst Input = fs.readFileSync('Day2Input.txt', 'utf8').split('\\r\\n');\n\n\n\n\n\n\nNote\n\n\n\nDay2Input.txt is the path to the file I used to store my puzzle input. This code may need to be changed if the puzzle input file is stored in a different location.\n\n\n\n\nStep 2. Find the match points for each outcome:\nfunction getAllIndexes(arr, val) {\n    var indexes = [], i;\n    for(i = 0; i &lt; arr.length; i++)\n        if (arr[i] === val)\n            indexes.push(i);\n    return indexes;\n}\n\nlet cx = getAllIndexes(Input, 'C X').length;\n\nlet ay = getAllIndexes(Input, 'A Y').length;\n\nlet bz = getAllIndexes(Input, 'B Z').length;\n\nlet ax = getAllIndexes(Input, 'A X').length;\n\nlet by = getAllIndexes(Input, 'B Y').length;\n\nlet cz = getAllIndexes(Input, 'C Z').length;\n\nlet bx = getAllIndexes(Input, 'B X').length;\n\nlet cy = getAllIndexes(Input, 'C Y').length;\n\nlet az = getAllIndexes(Input, 'A Z').length;\n\n\nStep 3. Multiply the match outcomes by there respective point values:\nUsing the point values from the instructions we take the sum of the product of each match outcome and its point value.\nlet sum = (cx*7)+(ay*8)+(bz*9)+(ax*4)+(by*5)+(cz*6)+(bx)+(cy*2)+(az*3);"
  },
  {
    "objectID": "posts/post_01/index.html#try-it-for-yourself",
    "href": "posts/post_01/index.html#try-it-for-yourself",
    "title": "Day 2 Solution",
    "section": "Try it for yourself",
    "text": "Try it for yourself\n\n\nAfter you select your text file, the total point value will appear here!\nThe JavaScript file is here.\nSections of the browser implementation were adapted from my professor’s browser implementation of the challenge from Advent Of Code 2022 Day 1"
  },
  {
    "objectID": "posts/post_03/index.html",
    "href": "posts/post_03/index.html",
    "title": "CSS Image Zoom on Hover",
    "section": "",
    "text": "Introduction\nI wanted to make some slick effects for the website so it looks more professional. I found a tutorial on pinterest for a zoom effect on hover. However, I ran into several problems when I applied the code so I will show how I fixed those problems here.\n\n\nFinding the Element\nIn order to make any changes to the element we have to find it’s container. To do this we need to open the developer tools our browser while we are viewing the webpage we want to modify.\n\n\nCitation\n\n\n\n\n\n Back to top"
  }
]