---
title: Tidying Unkempt Data
author: Rhys Tilford
description: Read about how I used R to tidy and display urban transport data
date: 11/13/2023
categories: [Data Analysis, Programming, R]
image: MBTA_Platform.jpg
---

<style>
  body {
background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' version='1.1' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:svgjs='http://svgjs.dev/svgjs' width='1440' height='6750' preserveAspectRatio='none' viewBox='0 0 1440 6750'%3e%3cg mask='url(%26quot%3b%23SvgjsMask2586%26quot%3b)' fill='none'%3e%3crect width='1440' height='6750' x='0' y='0' fill='url(%26quot%3b%23SvgjsLinearGradient2587%26quot%3b)'%3e%3c/rect%3e%3cpath d='M907.5 2995.05L908.56 2995.05L908.56 3001.56L907.5 3001.56z' fill='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M37.7 5866.79L160.28 5866.79L160.28 5956.61L37.7 5956.61z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M1147.1 5778.26L1291 5778.26L1291 5922.16L1147.1 5922.16z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M817 5410.75L899.75 5410.75L899.75 5554.32L817 5554.32z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M43.08 2228.44L133.46 2228.44L133.46 2350.17L43.08 2350.17z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M658.98 1393.22 a135.32 135.32 0 1 0 270.64 0 a135.32 135.32 0 1 0 -270.64 0z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M158.43 1791.36a32.64 32.64 0 1 0-46.6-45.71z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M744.7 3670.88 a3.69 3.69 0 1 0 7.38 0 a3.69 3.69 0 1 0 -7.38 0z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M414.46 1721.55L551.15 1721.55L551.15 1858.24L414.46 1858.24z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M1216.06 1901.45 a15.38 15.38 0 1 0 30.76 0 a15.38 15.38 0 1 0 -30.76 0z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M1224.47 3067.6L1277.7 3067.6L1277.7 3113.52L1224.47 3113.52z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1080.51 12.2 a17.1 17.1 0 1 0 34.2 0 a17.1 17.1 0 1 0 -34.2 0z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M741.97 4886.53 a30.58 30.58 0 1 0 61.16 0 a30.58 30.58 0 1 0 -61.16 0z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M1062.66 977.68L1100.43 977.68L1100.43 1015.45L1062.66 1015.45z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M772.45 3038.11L865.32 3038.11L865.32 3130.98L772.45 3130.98z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M948.6 5803.51 a127.35 127.35 0 1 0 254.7 0 a127.35 127.35 0 1 0 -254.7 0z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M476.08 3731.33 a71.08 71.08 0 1 0 142.16 0 a71.08 71.08 0 1 0 -142.16 0z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M-96.67 748.82 a111.89 111.89 0 1 0 223.78 0 a111.89 111.89 0 1 0 -223.78 0z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M142.3 5615.44a113.93 113.93 0 1 0-152.36 169.43z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M511.38 5607.83L589.07 5607.83L589.07 5685.52L511.38 5685.52z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M227.97 2797.72L251.59 2797.72L251.59 2821.34L227.97 2821.34z' fill='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M1411.95 4407.11a108.66 108.66 0 1 0-81.34-201.52z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1226.37 3642.87 a108.6 108.6 0 1 0 217.2 0 a108.6 108.6 0 1 0 -217.2 0z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M357.99 3022.94 a74.36 74.36 0 1 0 148.72 0 a74.36 74.36 0 1 0 -148.72 0z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M257.42 6210.07 a53.81 53.81 0 1 0 107.62 0 a53.81 53.81 0 1 0 -107.62 0z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M1317.18 2917.18a98 98 0 1 0-62.62 185.73z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M314.42 1006.08a120.26 120.26 0 1 0-6.88 240.42z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M924.53 1396.45a101.81 101.81 0 1 0-196.94 51.72z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M257.67 3134.31 a17.36 17.36 0 1 0 34.72 0 a17.36 17.36 0 1 0 -34.72 0z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1150.75 5685.04a67.23 67.23 0 1 0 132.19-24.6z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M157.76 2114.13 a88.56 88.56 0 1 0 177.12 0 a88.56 88.56 0 1 0 -177.12 0z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M1114.69 4599.5a65.83 65.83 0 1 0 101.62 83.72z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M799.84 5740.07a49.61 49.61 0 1 0 40.13-90.74z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1433.85 4426.48L1446.09 4426.48L1446.09 4517.51L1433.85 4517.51z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1386.75 4133.44L1430.79 4133.44L1430.79 4191.8L1386.75 4191.8z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M1326.7 2236.09a114.58 114.58 0 1 0-147.93-175.02z' fill='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M1183.62 4503.14L1289.28 4503.14L1289.28 4608.8L1183.62 4608.8z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M991.26 1325.56a125.72 125.72 0 1 0-183.75-171.63z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M11.94 3203.78 a28.72 28.72 0 1 0 57.44 0 a28.72 28.72 0 1 0 -57.44 0z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1211.44 2112.41L1354.43 2112.41L1354.43 2254.35L1211.44 2254.35z' fill='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M224.76 5443.03a133.25 133.25 0 1 0 242.88-109.68z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M265.22 5943.14L376.17 5943.14L376.17 6054.09L265.22 6054.09z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M1219.85 4198.55 a46.38 46.38 0 1 0 92.76 0 a46.38 46.38 0 1 0 -92.76 0z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1091.39 4265.84L1160.18 4265.84L1160.18 4366.48L1091.39 4366.48z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M771.81 4545.97 a27.65 27.65 0 1 0 55.3 0 a27.65 27.65 0 1 0 -55.3 0z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M208.09 289.13 a14.38 14.38 0 1 0 28.76 0 a14.38 14.38 0 1 0 -28.76 0z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1010.95-29.17a70.49 70.49 0 1 0 53.61 130.39z' fill='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1279.97 5764.84a98.28 98.28 0 1 0-190.2-49.62z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M44.31 1098.6L109.88 1098.6L109.88 1164.17L44.31 1164.17z' stroke='rgba(239%2c 163%2c 29%2c 1)'%3e%3c/path%3e%3cpath d='M1226.22 5204.14 a57.49 57.49 0 1 0 114.98 0 a57.49 57.49 0 1 0 -114.98 0z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1231.78 2128.61a109.24 109.24 0 1 0 23.83 217.18z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1253.16 3058.67L1304.29 3058.67L1304.29 3109.8L1253.16 3109.8z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M913.86 147.05L997.5 147.05L997.5 230.69L913.86 230.69z' stroke='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M1349.33 3112.16L1429.95 3112.16L1429.95 3228.91L1349.33 3228.91z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3cpath d='M1057.39 5200.43 a49.46 49.46 0 1 0 98.92 0 a49.46 49.46 0 1 0 -98.92 0z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M752.23 6161.33L873.59 6161.33L873.59 6166.8L752.23 6166.8z' fill='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M821.05 1283.67L846.55 1283.67L846.55 1293.24L821.05 1293.24z' stroke='rgba(252%2c 57%2c 57%2c 1)'%3e%3c/path%3e%3cpath d='M538.65 5253.6a52.77 52.77 0 1 0 64.17 83.79z' stroke='rgba(19%2c 185%2c 85%2c 1)'%3e%3c/path%3e%3cpath d='M1184.36 6227.97L1220.92 6227.97L1220.92 6321.23L1184.36 6321.23z' fill='rgba(0%2c 156%2c 220%2c 1)'%3e%3c/path%3e%3c/g%3e%3cdefs%3e%3cmask id='SvgjsMask2586'%3e%3crect width='1440' height='6750' fill='white'%3e%3c/rect%3e%3c/mask%3e%3clinearGradient x1='50%25' y1='0%25' x2='50%25' y2='100%25' gradientUnits='userSpaceOnUse' id='SvgjsLinearGradient2587'%3e%3cstop stop-color='rgba(14%2c 42%2c 71%2c 0)' offset='0.98'%3e%3c/stop%3e%3cstop stop-color='rgba(89%2c 49%2c 150%2c 1)' offset='1'%3e%3c/stop%3e%3c/linearGradient%3e%3c/defs%3e%3c/svg%3e");
  }
</style>



```{ojs}
Plot = import("https://esm.run/@observablehq/plot@0.6.11")
```

```{r}
#| include: false
### load necessary packages
library(tidyverse)
library(rvest)
library(magrittr)
library(rlang)
library(stats)
library(readr)
```

### Introduction

Transport has always been a passion of mine. I have always adored Trains, Planes, Cars, Boats, and any other type of vehicle. As I matured I began to see transit through a new lens. The sights and sounds of large transport-oriented machinary no longer held my attention like they once did. A more humanistic view of transport caught my fancy and I began to take interest in transport equity for people from all socio-economic backgrounds.

It is well known that the automobile is a focal point in American society. That said, I was well into my teens before I noticed the consequences our car-centric culture causes for people who either can't afford to own a car or choose not to own a car. This realization invigorated my interest in public transport and walkable infrastructure. In this data exploration, I hope to shed some light on the state of urban rail transport systems in America and compare them to that of other first world countries.

### The Data

I found a fascinating data table on [this](https://en.wikipedia.org/wiki/List_of_metro_systems) Wikipedia page so I decided to pull it and analize it. Here is the code I used to pull it:

```{r}
#| eval: false
web_page <- "https://en.wikipedia.org/wiki/List_of_metro_systems"

Tables <-
  web_page %>%
  read_html() %>%
  html_elements("table")

MetroList <- 
  Tables %>% 
  purrr::pluck(1) %>%
  html_table() %>%
  select(1:9)
```

```{r}
#| echo: false
setwd("C:/Users/Rhys Tilford/OneDrive/Documents/personal-rhys-tilford/posts/post_02")
MetroList <- read.csv(file = "MetroData.csv") %>% select(2:10)

```

Much to my dismay the data was riddled with miscellaneous junk. Here is the data inside MetroList:

```{r}
#| echo: false
MetroList %>% 
  DT::datatable(class = "table table-hover",
                style = "bootstrap",
                options = list(pageLength = 5))
```

Here are the problems I see in MetroList:

 - The name of the column that holds the number of stations on each system has a long and irrelevent name.
 - Several of the columns have units and footnote links in them.

I decided to import it to Rstudio and take a crack at cleaning it.

### Tidying

Optimistically, I decided to call this new table TidyMetroList.

##### Renaming Columns

The following code renames the columns with a unified naming system:

```{r}
#| eval: false
TidyMetroList <-
  MetroList %>%
  set_names(c("City",
              "Country",
              "Name",
              "ServiceOpened",
              "LastExpanded",
              "StationCount",
              "Lines",
              "SystemLength",
              "RidershipMillions"))
```

```{r}
#| echo: false
MetroList %>% 
  set_names(c("City", "Country", "Name", "ServiceOpened", "LastExpanded", "StationCount", "Lines", "SystemLength", "RidershipMillions")) %>%
  DT::datatable(class = "table table-hover",
                style = "bootstrap",
                options = list(pageLength = 5))
```

Much better! There's still more to go though. Next we can tackle the extra gunk in the columns.

##### Isolating the Data

We'll do this part with regular expressions and the `stringr` package. These are the main regular expressions we'll use:

> - `[]`: Grouping
>    - This element matches one of any character inside the brackets.
> - `|`: Alternation
>    - This element sperates two expressions. The computer will match one or the other.
> - `w`: Word
>    - This matches "word characters." It is very inclusive with what it defines as a word character so it needs to be used with care.
> - `s`: Whitespace
>    - This matches all forms of whitespace.
> - `d`: Digit
>    - This matches any natural number in the closed interval [0,9].
> - `.`: Dot
>    - This matches everything except linebreaks.
> - `+`: Plus
>    - This matches one or more of the expression it follows.
> - `?`: Optional
>    - This matches 0 or 1 of the expression it follows.
> - `{}`: Quantifier
>    - This matches the quantity in the curly-brackets.
> - `(?<=ExpressionHere)`: Positive Lookbehind
>    - This matches an expression before the main expression without including it in the result.
> - `(?=ExpressionHere)`: Positive Lookahead
>    - This matches an expression after the main expression without including it in the result.
> 
> -- <cite>Adapted from the reference book on [regexr.com](https://regexr.com)</cite>

:::{.callout-tip}
If you want some practice with regular expressions, checkout [regexr.com](https://regexr.com). They have a development environment that tests expressions in real-time and a reference book containing descriptions for every command.
:::

This code uses regular expresssions to remove all of the gunk in the columns:
```{r}
#| eval: false
#| warning: false
TidyMetroList <-
  TidyMetroList %>%
  mutate(ServiceOpened = as.numeric(str_replace_all(ServiceOpened, "\\[[\\w+\\s+]+\\]", "")),
         LastExpanded = as.numeric(str_replace_all(LastExpanded, "\\[[\\w+\\s+]+\\]", "")),
         Country = str_replace_all(Country, "\\[[\\w+\\s+]+\\]", ""),
         Name = str_replace_all(Name, "\\[[\\w\\s]+\\]|\\([\\w\\s]+\\)", ""),
         StationCount = as.numeric(str_replace_all(StationCount, "\\[[\\w+\\s+]+\\]", "")),
         SystemLength = str_replace_all(SystemLength, "\\skm\\s|\\d+(\\.\\d+)?.mi|\\[[\\w+\\s+]+\\]|[\\(\\)]+", ""))
```

```{r}
#| echo: false
#| warning: false
MetroList %>% 
  set_names(c("City", "Country", "Name", "ServiceOpened", "LastExpanded", "StationCount", "Lines", "SystemLength", "RidershipMillions")) %>%
  mutate(ServiceOpened = as.numeric(str_replace_all(ServiceOpened, "\\[[\\w+\\s+]+\\]", "")),
         LastExpanded = as.numeric(str_replace_all(LastExpanded, "\\[[\\w+\\s+]+\\]", "")),
         Country = str_replace_all(Country, "\\[[\\w+\\s+]+\\]", ""),
         Name = str_replace_all(Name, "\\[[\\w\\s]+\\]|\\([\\w\\s]+\\)", ""),
         StationCount = as.numeric(str_replace_all(StationCount, "\\[[\\w+\\s+]+\\]", "")),
         SystemLength = str_replace_all(SystemLength, "\\skm\\s|\\d+(\\.\\d+)?.mi|\\[[\\w+\\s+]+\\]|[\\(\\)]+", "")) %>%
  DT::datatable(class = "table table-hover",
                style = "bootstrap",
                options = list(pageLength = 5))
```

Lovely! Now there's only one problem. Notice that the `RidershipMillions` column still was not dealt with in the last command. That's because the parenthetical statements in that column show the timeframe in which the ridership data was collected. We'd rather not get rid of this data so hastily.

##### A Special Case

The following code will snatch the data from the parenthesis and drop it in a new column called `RidershipMillionsDataFrom`. Then it will remove the excess information from `RidershipMillions` like we did above.
```{r}
#| eval: false
TidyMetroList <-
  TidyMetroList %>%
  mutate(RidershipMillionsDataFrom = str_extract(RidershipMillions, "(?<=\\().+(?=\\))"),
         RidershipMillions = as.numeric(str_replace_all(RidershipMillions, "\\[[\\w+\\s+]+\\]|(\\().+(\\))", "")))
```

```{r}
#| echo: false
#| warning: false
TidyMetroList <- 
  MetroList %>% 
  set_names(c("City", "Country", "Name", "ServiceOpened", "LastExpanded", "StationCount", "Lines", "SystemLength", "RidershipMillions")) %>%
  mutate(ServiceOpened = as.numeric(str_replace_all(ServiceOpened, "\\[[\\w+\\s+]+\\]", "")),
         LastExpanded = as.numeric(str_replace_all(LastExpanded, "\\[[\\w+\\s+]+\\]", "")),
         Country = str_replace_all(Country, "\\[[\\w+\\s+]+\\]", ""),
         Name = str_replace_all(Name, "\\[[\\w\\s]+\\]|\\([\\w\\s]+\\)", ""),
         StationCount = as.numeric(str_replace_all(StationCount, "\\[[\\w+\\s+]+\\]", "")),
         SystemLength = as.numeric(str_replace_all(SystemLength, "\\skm\\s|\\d+(\\.\\d+)?.mi|\\[[\\w+\\s+]+\\]|[\\(\\)]+", "")),
         Lines = as.numeric(Lines)) %>%
  mutate(RidershipMillionsDataFrom = str_extract(RidershipMillions, "(?<=\\().+(?=\\))"),
         RidershipMillions = as.numeric(str_replace_all(RidershipMillions, "\\[[\\w+\\s+]+\\]|(\\().+(\\))", "")))
```

```{r}
#| echo: false
TidyMetroList  %>%
  DT::datatable(class = "table table-hover",
                style = "bootstrap",
                options = list(pageLength = 5,
                               buttons.buttons.classname = "btn btn-primary",
                               PagingTag = "button"))
```

### Ridership Data Analysis

##### Analysis

I would like to know what the average ridership is like for the five largest economies. So I start by removing any NA values with the command in the third line. Next, I group the dataset so the mutate command takes the mean of `RidershipMillions` for each country. Now I filter out the five countries of interest. The select command picks out the columns I choose and the distinct command removes superfluous rows.

##### Caveat

This data set is not a great indicator of how widely used urban rail transport is in these countries because we have no data in this dataset for the population that each metro system serves. If we did it would be very interesting to compare the average ridership divided by the average service zone population.

```{r}
MetroRidershipGraphInput <-
  TidyMetroList %>% 
  filter(Country %in% c("United States", "Germany", "India", "China", "Japan")) %>%
  na.omit() %>% 
  group_by(Country) %>% 
  mutate(RidershipMillionsAvg = mean(RidershipMillions)) %>% 
  select(Country, RidershipMillionsAvg) %>%  
  distinct()
```

```{r}
#| echo: false
MetroRidershipGraphInput  %>%
  DT::datatable(class = "table table-hover",
                style = "bootstrap",
                options = list(pageLength = 5,
                               buttons.buttons.classname = "btn btn-primary",
                               PagingTag = "button"))
```

##### Visual

:::{.callout-note}
For the visuals I used [Observables](https://observablehq.com/). It is an excellent graphics generator that supplies a clear interface for creating a notebooks. If you would like to see the work I did to generate this code checkout my public [notebook](https://observablehq.com/@rhys-tilford-ws/visualizing-urban-rail-transport-data) for this project.
:::

```{ojs}
Plot.plot({
  color: {    
    type: "categorical",
    domain: d3.range(5).map[`China`, `Germany`, `India`, `Japan`, `United States`], 
    range: ["#593196", "#009CDC", "#13B955", "#EFA31D", "#FC3939"]
  },
  title: "Average Ridership in 5 Major Countries",
  y: { label: "Millions of Riders" },
  marks: [
    Plot.barY(await FileAttachment("MetroRidership.csv").csv({ typed: "auto" }), {
      x: "Country",
      y: "Average Ridership (Millions)",
      fill: "Country",
      tip: true
    }),
    Plot.ruleY([0])
  ]
})
```


### System Size Data Analysis

##### Analysis

First, we take the dataset and filter so we only have data on the five countries we are interested in. Then we remove any NA values. Now we move to mutations. We would like to see some metric of how many stations there are on each line. We will mutate `StationCount` divided by `SystemLength` and call this ratio `StationDensity`. At this point we still have the data for each metro system in the dataset individually. We will now use `group_by()` to group the data into 5 groups corresponding to the 5 countries. Now we can run a mutate to find the averages of `StationCount`, `Lines`, `SystemLength`, and `StationDensity` for each of the 5 countries. We will select the five columns of interest and remove any duplicated rows. Now we have all the data we need to make some really intriguing graphics.

##### Caveat

Upon looking at the data again, I realize that I could have built a variable more intuitive than `StationDensity`. Station density is currently measured in $\frac{Stations}{Kilometer}$. I think it would be easier to communicate this data if I flipped the ratio to measure in $\frac{Kilometers}{Station}$. In this format, the data would show that average distance between 2 stations. If one were to divide this average in half we could see the average max distance a rider would have to walk in order to get to their destination from a rail station.

```{r}
MetroSizeGraphInput <- 
  TidyMetroList %>% 
  filter(Country %in% c("United States", "Germany", "India", "China", "Japan")) %>%
  na.omit() %>%
  mutate(StationDensity = StationCount/SystemLength) %>% 
  group_by(Country) %>% 
  mutate(StationCountAvg = mean(StationCount),
         LinesAvg = mean(Lines),
         SystemLengthAvg = mean(SystemLength),
         StationDensityAvg = mean(StationDensity)) %>% 
  select(Country, StationCountAvg, LinesAvg, SystemLengthAvg, StationDensityAvg) %>% 
  distinct()
```

```{r}
#| echo: false
MetroSizeGraphInput  %>%
  DT::datatable(class = "table table-hover",
                style = "bootstrap",
                options = list(pageLength = 5,
                               buttons.buttons.classname = "btn btn-primary",
                               PagingTag = "button"))
```

##### Visuals

```{ojs}
Plot.plot({
  color: {    
    type: "categorical",
    domain: d3.range(5).map[`China`, `Germany`, `India`, `Japan`, `United States`], 
    range: ["#593196", "#009CDC", "#13B955", "#EFA31D", "#FC3939"]
  },
  title: "Average Distance Between Stations",
  y: { label: "Kilometers per Station" },
  marks: [
    Plot.barY(await FileAttachment("MetroSize.csv").csv({ typed: "auto" }), {
      x: "Country",
      y: "Average Station Density",
      fill: "Country",
      tip: true
    }),
    Plot.ruleY([0])
  ]
})
```

```{ojs}
Plot.plot({
  color: {    
    type: "categorical",
    domain: d3.range(5).map[`China`, `Germany`, `India`, `Japan`, `United States`], 
    range: ["#593196", "#009CDC", "#13B955", "#EFA31D", "#FC3939"]
  },
  title: "Average System Length",
  y: { label: "Kilometers of Rail Service" },
  marks: [
    Plot.barY(await FileAttachment("MetroSize.csv").csv({ typed: "auto" }), {
      x: "Country",
      y: "Average System Length",
      fill: "Country",
      tip: true
    }),
    Plot.ruleY([0])
  ]
})
```

```{ojs}
Plot.plot({
  color: {    
    type: "categorical",
    domain: d3.range(5).map[`China`, `Germany`, `India`, `Japan`, `United States`], 
    range: ["#593196", "#009CDC", "#13B955", "#EFA31D", "#FC3939"]
  },
  title: "Average Number of Stations per System",
  y: { label: "Stations" },
  marks: [
    Plot.barY(await FileAttachment("MetroSize.csv").csv({ typed: "auto" }), {
      x: "Country",
      y: "Average Number of Stations",
      fill: "Country",
      tip: true
    }),
    Plot.ruleY([0])
  ]
})
```

### System Maturity Data Analysis

##### Analysis

I would like to compare the age of these five metro systems. First I'll filter out all the countries that are irelevant to our comparison. Next we need to find both the age of each system and the amount of time since each was expanded. For that we need to know the current date. Luckily, R has a function called `Sys.Date()` that returns the current time and date. So we need to extract the year from `Sys.date()`. We'll use both our venerable regular expressions and the `stringr` package to accomplish this. Then we can ensure that this string of 4 numbers is converted to a number with the `as.numeric()` function. Now we mutate the difference between the column `ServiceOpened` and our current year to get a new column called `SystemAge`. We also mutate the difference between the column `LastExpanded` and our current year to get a new column called `YearsSinceExpansion`. Now we select only the columns we need and remove any NA vlaues from those columns. Next we can group by each country and find the average for each as explained [above](#analysis-1). Finally we select the columns `Country`, `AverageYearsSinceExpansion`, and `AverageSystemAge`. If graphing this data sounds like a problem, you would be right. We need to create a categorical variable with the levels: `AverageYearsSinceExpansion` and `AverageSystemAge`. Thank goodness for the R function `pivot_longer()`! It takes three arguments:
 - `cols`
    - A column or columns to consider in the pivoting process.
 - `names_to`
    - The name of a new column to hold the values of the column titles. (`AverageYearsSinceExpansion` and `AverageSystemAge` in our case).
 - `values_to`
    - The name of a new column to hold the values of the columns being pivoted.
The resulting dataframe is just below the code chunk.

```{r}
MetroMaturityGraphInput <- 
  TidyMetroList %>% 
  filter(Country %in% c("United States", "Germany", "India", "China", "Japan")) %>% 
  mutate(SystemAge = (as.numeric(str_extract(Sys.Date(), "\\d{4}")) - ServiceOpened),
         YearsSinceExpansion = (as.numeric(str_extract(Sys.Date(), "\\d{4}")) - LastExpanded)) %>% 
  select(Country, SystemAge, YearsSinceExpansion) %>%
  na.omit() %>%
  group_by(Country) %>% 
  mutate(AverageSystemAge = mean(SystemAge),
         AverageYearsSinceExpansion = mean(YearsSinceExpansion)) %>% 
  select(Country, AverageYearsSinceExpansion, AverageSystemAge) %>%  
  distinct() %>%
  pivot_longer(cols = !Country, names_to = "Types", values_to = "Values")
```

```{r}
#| echo: false
MetroMaturityGraphInput  %>%
  DT::datatable(class = "table table-hover",
                style = "bootstrap",
                options = list(pageLength = 5,
                               buttons.buttons.classname = "btn btn-primary",
                               PagingTag = "button"))
```

##### Visual

```{ojs}
Plot.plot({
  color: {    
    type: "categorical",
    domain: d3.range(5).map[`China`, `Germany`, `India`, `Japan`, `United States`], 
    range: ["#593196", "#009CDC", "#13B955", "#EFA31D", "#FC3939"]
  },
  title: "Transit System Maturity",
  subtitle: "Urban Rail System Maturity in 5 Major Countries",
  y: { label: "Years" },
  marks: [
    Plot.frame({ strokeOpacity: 0.1 }),
    Plot.barY(await FileAttachment("MetroMaturity.csv").csv({ typed: "auto" }), {
      fx: " ",
      x: "Country",
      y: "Values",
      fill: "Country",
      tip: true
    }),
    Plot.ruleY([0])
  ]
})
```
